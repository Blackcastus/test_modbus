ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"mb.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.eMBInit,"ax",%progbits
  18              		.align	1
  19              		.global	eMBInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	eMBInit:
  25              	.LVL0:
  26              	.LFB65:
  27              		.file 1 "FreeModbus/mb.c"
   1:FreeModbus/mb.c **** /* 
   2:FreeModbus/mb.c ****  * FreeModbus Libary: A portable Modbus implementation for Modbus ASCII/RTU.
   3:FreeModbus/mb.c ****  * Copyright (c) 2006-2018 Christian Walter <cwalter@embedded-solutions.at>
   4:FreeModbus/mb.c ****  * All rights reserved.
   5:FreeModbus/mb.c ****  *
   6:FreeModbus/mb.c ****  * Redistribution and use in source and binary forms, with or without
   7:FreeModbus/mb.c ****  * modification, are permitted provided that the following conditions
   8:FreeModbus/mb.c ****  * are met:
   9:FreeModbus/mb.c ****  * 1. Redistributions of source code must retain the above copyright
  10:FreeModbus/mb.c ****  *    notice, this list of conditions and the following disclaimer.
  11:FreeModbus/mb.c ****  * 2. Redistributions in binary form must reproduce the above copyright
  12:FreeModbus/mb.c ****  *    notice, this list of conditions and the following disclaimer in the
  13:FreeModbus/mb.c ****  *    documentation and/or other materials provided with the distribution.
  14:FreeModbus/mb.c ****  * 3. The name of the author may not be used to endorse or promote products
  15:FreeModbus/mb.c ****  *    derived from this software without specific prior written permission.
  16:FreeModbus/mb.c ****  *
  17:FreeModbus/mb.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  18:FreeModbus/mb.c ****  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  19:FreeModbus/mb.c ****  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  20:FreeModbus/mb.c ****  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
  21:FreeModbus/mb.c ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  22:FreeModbus/mb.c ****  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  23:FreeModbus/mb.c ****  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  24:FreeModbus/mb.c ****  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  25:FreeModbus/mb.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  26:FreeModbus/mb.c ****  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27:FreeModbus/mb.c ****  *
  28:FreeModbus/mb.c ****  * File: $Id: mb.c,v 1.27 2007/02/18 23:45:41 wolti Exp $
  29:FreeModbus/mb.c ****  */
  30:FreeModbus/mb.c **** 
  31:FreeModbus/mb.c **** /* ----------------------- System includes ----------------------------------*/
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 2


  32:FreeModbus/mb.c **** #include "stdlib.h"
  33:FreeModbus/mb.c **** #include "string.h"
  34:FreeModbus/mb.c **** 
  35:FreeModbus/mb.c **** /* ----------------------- Platform includes --------------------------------*/
  36:FreeModbus/mb.c **** #include "port.h"
  37:FreeModbus/mb.c **** 
  38:FreeModbus/mb.c **** /* ----------------------- Modbus includes ----------------------------------*/
  39:FreeModbus/mb.c **** 
  40:FreeModbus/mb.c **** #include "mb.h"
  41:FreeModbus/mb.c **** #include "mbconfig.h"
  42:FreeModbus/mb.c **** #include "mbframe.h"
  43:FreeModbus/mb.c **** #include "mbproto.h"
  44:FreeModbus/mb.c **** #include "mbfunc.h"
  45:FreeModbus/mb.c **** 
  46:FreeModbus/mb.c **** #include "mbport.h"
  47:FreeModbus/mb.c **** 
  48:FreeModbus/mb.c **** #if MB_SLAVE_RTU_ENABLED == 1
  49:FreeModbus/mb.c **** #include "mbrtu.h"
  50:FreeModbus/mb.c **** #endif
  51:FreeModbus/mb.c **** #if MB_SLAVE_ASCII_ENABLED == 1
  52:FreeModbus/mb.c **** #include "mbascii.h"
  53:FreeModbus/mb.c **** #endif
  54:FreeModbus/mb.c **** #if MB_SLAVE_TCP_ENABLED == 1
  55:FreeModbus/mb.c **** #include "mbtcp.h"
  56:FreeModbus/mb.c **** #endif
  57:FreeModbus/mb.c **** 
  58:FreeModbus/mb.c **** #ifndef MB_PORT_HAS_CLOSE
  59:FreeModbus/mb.c **** #define MB_PORT_HAS_CLOSE 0
  60:FreeModbus/mb.c **** #endif
  61:FreeModbus/mb.c **** 
  62:FreeModbus/mb.c **** /* ----------------------- Static variables ---------------------------------*/
  63:FreeModbus/mb.c **** 
  64:FreeModbus/mb.c **** static UCHAR    ucMBAddress;
  65:FreeModbus/mb.c **** static eMBMode  eMBCurrentMode;
  66:FreeModbus/mb.c **** 
  67:FreeModbus/mb.c **** static enum
  68:FreeModbus/mb.c **** {
  69:FreeModbus/mb.c ****     STATE_ENABLED,
  70:FreeModbus/mb.c ****     STATE_DISABLED,
  71:FreeModbus/mb.c ****     STATE_NOT_INITIALIZED
  72:FreeModbus/mb.c **** } eMBState = STATE_NOT_INITIALIZED;
  73:FreeModbus/mb.c **** 
  74:FreeModbus/mb.c **** /* Functions pointer which are initialized in eMBInit( ). Depending on the
  75:FreeModbus/mb.c ****  * mode (RTU or ASCII) the are set to the correct implementations.
  76:FreeModbus/mb.c ****  * Using for Modbus Slave
  77:FreeModbus/mb.c ****  */
  78:FreeModbus/mb.c **** static peMBFrameSend peMBFrameSendCur;
  79:FreeModbus/mb.c **** static pvMBFrameStart pvMBFrameStartCur;
  80:FreeModbus/mb.c **** static pvMBFrameStop pvMBFrameStopCur;
  81:FreeModbus/mb.c **** static peMBFrameReceive peMBFrameReceiveCur;
  82:FreeModbus/mb.c **** static pvMBFrameClose pvMBFrameCloseCur;
  83:FreeModbus/mb.c **** 
  84:FreeModbus/mb.c **** /* Callback functions required by the porting layer. They are called when
  85:FreeModbus/mb.c ****  * an external event has happend which includes a timeout or the reception
  86:FreeModbus/mb.c ****  * or transmission of a character.
  87:FreeModbus/mb.c ****  * Using for Modbus Slave
  88:FreeModbus/mb.c ****  */
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 3


  89:FreeModbus/mb.c **** BOOL( *pxMBFrameCBByteReceived ) ( void );
  90:FreeModbus/mb.c **** BOOL( *pxMBFrameCBTransmitterEmpty ) ( void );
  91:FreeModbus/mb.c **** BOOL( *pxMBPortCBTimerExpired ) ( void );
  92:FreeModbus/mb.c **** 
  93:FreeModbus/mb.c **** BOOL( *pxMBFrameCBReceiveFSMCur ) ( void );
  94:FreeModbus/mb.c **** BOOL( *pxMBFrameCBTransmitFSMCur ) ( void );
  95:FreeModbus/mb.c **** 
  96:FreeModbus/mb.c **** /* An array of Modbus functions handlers which associates Modbus function
  97:FreeModbus/mb.c ****  * codes with implementing functions.
  98:FreeModbus/mb.c ****  */
  99:FreeModbus/mb.c **** static xMBFunctionHandler xFuncHandlers[MB_FUNC_HANDLERS_MAX] = {
 100:FreeModbus/mb.c **** #if MB_FUNC_OTHER_REP_SLAVEID_ENABLED > 0
 101:FreeModbus/mb.c ****     {MB_FUNC_OTHER_REPORT_SLAVEID, eMBFuncReportSlaveID},
 102:FreeModbus/mb.c **** #endif
 103:FreeModbus/mb.c **** #if MB_FUNC_READ_INPUT_ENABLED > 0
 104:FreeModbus/mb.c ****     {MB_FUNC_READ_INPUT_REGISTER, eMBFuncReadInputRegister},
 105:FreeModbus/mb.c **** #endif
 106:FreeModbus/mb.c **** #if MB_FUNC_READ_HOLDING_ENABLED > 0
 107:FreeModbus/mb.c ****     {MB_FUNC_READ_HOLDING_REGISTER, eMBFuncReadHoldingRegister},
 108:FreeModbus/mb.c **** #endif
 109:FreeModbus/mb.c **** #if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
 110:FreeModbus/mb.c ****     {MB_FUNC_WRITE_MULTIPLE_REGISTERS, eMBFuncWriteMultipleHoldingRegister},
 111:FreeModbus/mb.c **** #endif
 112:FreeModbus/mb.c **** #if MB_FUNC_WRITE_HOLDING_ENABLED > 0
 113:FreeModbus/mb.c ****     {MB_FUNC_WRITE_REGISTER, eMBFuncWriteHoldingRegister},
 114:FreeModbus/mb.c **** #endif
 115:FreeModbus/mb.c **** #if MB_FUNC_READWRITE_HOLDING_ENABLED > 0
 116:FreeModbus/mb.c ****     {MB_FUNC_READWRITE_MULTIPLE_REGISTERS, eMBFuncReadWriteMultipleHoldingRegister},
 117:FreeModbus/mb.c **** #endif
 118:FreeModbus/mb.c **** #if MB_FUNC_READ_COILS_ENABLED > 0
 119:FreeModbus/mb.c ****     {MB_FUNC_READ_COILS, eMBFuncReadCoils},
 120:FreeModbus/mb.c **** #endif
 121:FreeModbus/mb.c **** #if MB_FUNC_WRITE_COIL_ENABLED > 0
 122:FreeModbus/mb.c ****     {MB_FUNC_WRITE_SINGLE_COIL, eMBFuncWriteCoil},
 123:FreeModbus/mb.c **** #endif
 124:FreeModbus/mb.c **** #if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
 125:FreeModbus/mb.c ****     {MB_FUNC_WRITE_MULTIPLE_COILS, eMBFuncWriteMultipleCoils},
 126:FreeModbus/mb.c **** #endif
 127:FreeModbus/mb.c **** #if MB_FUNC_READ_DISCRETE_INPUTS_ENABLED > 0
 128:FreeModbus/mb.c ****     {MB_FUNC_READ_DISCRETE_INPUTS, eMBFuncReadDiscreteInputs},
 129:FreeModbus/mb.c **** #endif
 130:FreeModbus/mb.c **** };
 131:FreeModbus/mb.c **** 
 132:FreeModbus/mb.c **** /* ----------------------- Start implementation -----------------------------*/
 133:FreeModbus/mb.c **** eMBErrorCode
 134:FreeModbus/mb.c **** eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, void *dHUART, ULONG ulBaudRate, void *dHTIM )
 135:FreeModbus/mb.c **** {
  28              		.loc 1 135 1 view -0
  29              		.cfi_startproc
  30              		@ args = 4, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 135 1 is_stmt 0 view .LVU1
  33 0000 38B5     		push	{r3, r4, r5, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 3, -16
  37              		.cfi_offset 4, -12
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 4


  38              		.cfi_offset 5, -8
  39              		.cfi_offset 14, -4
  40 0002 0446     		mov	r4, r0
  41 0004 0846     		mov	r0, r1
  42              	.LVL1:
 136:FreeModbus/mb.c ****     eMBErrorCode    eStatus = MB_ENOERR;
  43              		.loc 1 136 5 is_stmt 1 view .LVU2
 137:FreeModbus/mb.c **** 
 138:FreeModbus/mb.c ****     /* check preconditions */
 139:FreeModbus/mb.c ****     if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
  44              		.loc 1 139 5 view .LVU3
 140:FreeModbus/mb.c ****         ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
  45              		.loc 1 140 45 is_stmt 0 view .LVU4
  46 0006 01F1FF3C 		add	ip, r1, #-1
  47 000a 5FFA8CFC 		uxtb	ip, ip
 139:FreeModbus/mb.c ****         ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
  48              		.loc 1 139 7 view .LVU5
  49 000e BCF1F60F 		cmp	ip, #246
  50 0012 2CD8     		bhi	.L3
  51 0014 1146     		mov	r1, r2
  52              	.LVL2:
 139:FreeModbus/mb.c ****         ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
  53              		.loc 1 139 7 view .LVU6
  54 0016 1A46     		mov	r2, r3
  55              	.LVL3:
 141:FreeModbus/mb.c ****     {
 142:FreeModbus/mb.c ****         eStatus = MB_EINVAL;
 143:FreeModbus/mb.c ****     }
 144:FreeModbus/mb.c ****     else
 145:FreeModbus/mb.c ****     {
 146:FreeModbus/mb.c ****         ucMBAddress = ucSlaveAddress;
  56              		.loc 1 146 9 is_stmt 1 view .LVU7
  57              		.loc 1 146 21 is_stmt 0 view .LVU8
  58 0018 174B     		ldr	r3, .L8
  59              	.LVL4:
  60              		.loc 1 146 21 view .LVU9
  61 001a 1870     		strb	r0, [r3]
 147:FreeModbus/mb.c **** 
 148:FreeModbus/mb.c ****         switch ( eMode )
  62              		.loc 1 148 9 is_stmt 1 view .LVU10
  63 001c 0CB1     		cbz	r4, .L7
 149:FreeModbus/mb.c ****         {
 150:FreeModbus/mb.c **** #if MB_SLAVE_RTU_ENABLED > 0
 151:FreeModbus/mb.c ****         case MB_RTU:
 152:FreeModbus/mb.c ****             pvMBFrameStartCur = eMBRTUStart;
 153:FreeModbus/mb.c ****             pvMBFrameStopCur = eMBRTUStop;
 154:FreeModbus/mb.c ****             peMBFrameSendCur = eMBRTUSend;
 155:FreeModbus/mb.c ****             peMBFrameReceiveCur = eMBRTUReceive;
 156:FreeModbus/mb.c ****             pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 157:FreeModbus/mb.c ****             pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 158:FreeModbus/mb.c ****             pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 159:FreeModbus/mb.c ****             pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 160:FreeModbus/mb.c **** 
 161:FreeModbus/mb.c ****             eStatus = eMBRTUInit( ucMBAddress, dHUART, ulBaudRate, dHTIM );
 162:FreeModbus/mb.c ****             break;
 163:FreeModbus/mb.c **** #endif
 164:FreeModbus/mb.c **** #if MB_SLAVE_ASCII_ENABLED > 0
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 5


 165:FreeModbus/mb.c ****         case MB_ASCII:
 166:FreeModbus/mb.c ****             pvMBFrameStartCur = eMBASCIIStart;
 167:FreeModbus/mb.c ****             pvMBFrameStopCur = eMBASCIIStop;
 168:FreeModbus/mb.c ****             peMBFrameSendCur = eMBASCIISend;
 169:FreeModbus/mb.c ****             peMBFrameReceiveCur = eMBASCIIReceive;
 170:FreeModbus/mb.c ****             pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 171:FreeModbus/mb.c ****             pxMBFrameCBByteReceived = xMBASCIIReceiveFSM;
 172:FreeModbus/mb.c ****             pxMBFrameCBTransmitterEmpty = xMBASCIITransmitFSM;
 173:FreeModbus/mb.c ****             pxMBPortCBTimerExpired = xMBASCIITimerT1SExpired;
 174:FreeModbus/mb.c **** 
 175:FreeModbus/mb.c ****             eStatus = eMBASCIIInit( ucMBAddress, dHUART, ulBaudRate, dHTIM );
 176:FreeModbus/mb.c ****             break;
 177:FreeModbus/mb.c **** #endif
 178:FreeModbus/mb.c ****         default:
 179:FreeModbus/mb.c ****             eStatus = MB_EINVAL;
  64              		.loc 1 179 21 is_stmt 0 view .LVU11
  65 001e 0225     		movs	r5, #2
  66 0020 26E0     		b	.L2
  67              	.L7:
 152:FreeModbus/mb.c ****             pvMBFrameStopCur = eMBRTUStop;
  68              		.loc 1 152 13 is_stmt 1 view .LVU12
 152:FreeModbus/mb.c ****             pvMBFrameStopCur = eMBRTUStop;
  69              		.loc 1 152 31 is_stmt 0 view .LVU13
  70 0022 164B     		ldr	r3, .L8+4
  71 0024 164D     		ldr	r5, .L8+8
  72 0026 1D60     		str	r5, [r3]
 153:FreeModbus/mb.c ****             peMBFrameSendCur = eMBRTUSend;
  73              		.loc 1 153 13 is_stmt 1 view .LVU14
 153:FreeModbus/mb.c ****             peMBFrameSendCur = eMBRTUSend;
  74              		.loc 1 153 30 is_stmt 0 view .LVU15
  75 0028 164B     		ldr	r3, .L8+12
  76 002a 174D     		ldr	r5, .L8+16
  77 002c 1D60     		str	r5, [r3]
 154:FreeModbus/mb.c ****             peMBFrameReceiveCur = eMBRTUReceive;
  78              		.loc 1 154 13 is_stmt 1 view .LVU16
 154:FreeModbus/mb.c ****             peMBFrameReceiveCur = eMBRTUReceive;
  79              		.loc 1 154 30 is_stmt 0 view .LVU17
  80 002e 174B     		ldr	r3, .L8+20
  81 0030 174D     		ldr	r5, .L8+24
  82 0032 1D60     		str	r5, [r3]
 155:FreeModbus/mb.c ****             pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
  83              		.loc 1 155 13 is_stmt 1 view .LVU18
 155:FreeModbus/mb.c ****             pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
  84              		.loc 1 155 33 is_stmt 0 view .LVU19
  85 0034 174B     		ldr	r3, .L8+28
  86 0036 184D     		ldr	r5, .L8+32
  87 0038 1D60     		str	r5, [r3]
 156:FreeModbus/mb.c ****             pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
  88              		.loc 1 156 13 is_stmt 1 view .LVU20
 156:FreeModbus/mb.c ****             pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
  89              		.loc 1 156 31 is_stmt 0 view .LVU21
  90 003a 184B     		ldr	r3, .L8+36
  91 003c 0025     		movs	r5, #0
  92 003e 1D60     		str	r5, [r3]
 157:FreeModbus/mb.c ****             pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
  93              		.loc 1 157 13 is_stmt 1 view .LVU22
 157:FreeModbus/mb.c ****             pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 6


  94              		.loc 1 157 37 is_stmt 0 view .LVU23
  95 0040 174B     		ldr	r3, .L8+40
  96 0042 184D     		ldr	r5, .L8+44
  97 0044 1D60     		str	r5, [r3]
 158:FreeModbus/mb.c ****             pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
  98              		.loc 1 158 13 is_stmt 1 view .LVU24
 158:FreeModbus/mb.c ****             pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
  99              		.loc 1 158 41 is_stmt 0 view .LVU25
 100 0046 184B     		ldr	r3, .L8+48
 101 0048 184D     		ldr	r5, .L8+52
 102 004a 1D60     		str	r5, [r3]
 159:FreeModbus/mb.c **** 
 103              		.loc 1 159 13 is_stmt 1 view .LVU26
 159:FreeModbus/mb.c **** 
 104              		.loc 1 159 36 is_stmt 0 view .LVU27
 105 004c 184B     		ldr	r3, .L8+56
 106 004e 194D     		ldr	r5, .L8+60
 107 0050 1D60     		str	r5, [r3]
 161:FreeModbus/mb.c ****             break;
 108              		.loc 1 161 13 is_stmt 1 view .LVU28
 161:FreeModbus/mb.c ****             break;
 109              		.loc 1 161 23 is_stmt 0 view .LVU29
 110 0052 049B     		ldr	r3, [sp, #16]
 111 0054 FFF7FEFF 		bl	eMBRTUInit
 112              	.LVL5:
 162:FreeModbus/mb.c **** #endif
 113              		.loc 1 162 13 is_stmt 1 view .LVU30
 180:FreeModbus/mb.c ****             break;
 181:FreeModbus/mb.c ****         }
 182:FreeModbus/mb.c **** 
 183:FreeModbus/mb.c ****         if( eStatus == MB_ENOERR )
 114              		.loc 1 183 9 view .LVU31
 115              		.loc 1 183 11 is_stmt 0 view .LVU32
 116 0058 0546     		mov	r5, r0
 117 005a 48B9     		cbnz	r0, .L2
 184:FreeModbus/mb.c ****         {
 185:FreeModbus/mb.c ****             if( !xMBPortEventInit(  ) )
 118              		.loc 1 185 13 is_stmt 1 view .LVU33
 119              		.loc 1 185 18 is_stmt 0 view .LVU34
 120 005c FFF7FEFF 		bl	xMBPortEventInit
 121              	.LVL6:
 122              		.loc 1 185 15 view .LVU35
 123 0060 40B1     		cbz	r0, .L5
 186:FreeModbus/mb.c ****             {
 187:FreeModbus/mb.c ****                 /* port dependent event module initalization failed. */
 188:FreeModbus/mb.c ****                 eStatus = MB_EPORTERR;
 189:FreeModbus/mb.c ****             }
 190:FreeModbus/mb.c ****             else
 191:FreeModbus/mb.c ****             {
 192:FreeModbus/mb.c ****                 eMBCurrentMode = eMode;
 124              		.loc 1 192 17 is_stmt 1 view .LVU36
 125              		.loc 1 192 32 is_stmt 0 view .LVU37
 126 0062 154B     		ldr	r3, .L8+64
 127 0064 1C70     		strb	r4, [r3]
 193:FreeModbus/mb.c ****                 eMBState = STATE_DISABLED;
 128              		.loc 1 193 17 is_stmt 1 view .LVU38
 129              		.loc 1 193 26 is_stmt 0 view .LVU39
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 7


 130 0066 154B     		ldr	r3, .L8+68
 131 0068 0122     		movs	r2, #1
 132 006a 1A70     		strb	r2, [r3]
 133 006c 00E0     		b	.L2
 134              	.LVL7:
 135              	.L3:
 142:FreeModbus/mb.c ****     }
 136              		.loc 1 142 17 view .LVU40
 137 006e 0225     		movs	r5, #2
 138              	.LVL8:
 139              	.L2:
 194:FreeModbus/mb.c ****             }
 195:FreeModbus/mb.c ****         }
 196:FreeModbus/mb.c ****     }
 197:FreeModbus/mb.c ****     return eStatus;
 140              		.loc 1 197 5 is_stmt 1 view .LVU41
 198:FreeModbus/mb.c **** }
 141              		.loc 1 198 1 is_stmt 0 view .LVU42
 142 0070 2846     		mov	r0, r5
 143 0072 38BD     		pop	{r3, r4, r5, pc}
 144              	.LVL9:
 145              	.L5:
 188:FreeModbus/mb.c ****             }
 146              		.loc 1 188 25 view .LVU43
 147 0074 0325     		movs	r5, #3
 148 0076 FBE7     		b	.L2
 149              	.L9:
 150              		.align	2
 151              	.L8:
 152 0078 00000000 		.word	.LANCHOR0
 153 007c 00000000 		.word	.LANCHOR1
 154 0080 00000000 		.word	eMBRTUStart
 155 0084 00000000 		.word	.LANCHOR2
 156 0088 00000000 		.word	eMBRTUStop
 157 008c 00000000 		.word	.LANCHOR3
 158 0090 00000000 		.word	eMBRTUSend
 159 0094 00000000 		.word	.LANCHOR4
 160 0098 00000000 		.word	eMBRTUReceive
 161 009c 00000000 		.word	.LANCHOR5
 162 00a0 00000000 		.word	.LANCHOR6
 163 00a4 00000000 		.word	xMBRTUReceiveFSM
 164 00a8 00000000 		.word	.LANCHOR7
 165 00ac 00000000 		.word	xMBRTUTransmitFSM
 166 00b0 00000000 		.word	.LANCHOR8
 167 00b4 00000000 		.word	xMBRTUTimerT35Expired
 168 00b8 00000000 		.word	.LANCHOR9
 169 00bc 00000000 		.word	.LANCHOR10
 170              		.cfi_endproc
 171              	.LFE65:
 173              		.section	.text.eMBRegisterCB,"ax",%progbits
 174              		.align	1
 175              		.global	eMBRegisterCB
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 180              	eMBRegisterCB:
 181              	.LVL10:
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 8


 182              	.LFB66:
 199:FreeModbus/mb.c **** 
 200:FreeModbus/mb.c **** #if MB_SLAVE_TCP_ENABLED > 0
 201:FreeModbus/mb.c **** eMBErrorCode
 202:FreeModbus/mb.c **** eMBTCPInit( USHORT ucTCPPort )
 203:FreeModbus/mb.c **** {
 204:FreeModbus/mb.c ****     eMBErrorCode    eStatus = MB_ENOERR;
 205:FreeModbus/mb.c **** 
 206:FreeModbus/mb.c ****     if( ( eStatus = eMBTCPDoInit( ucTCPPort ) ) != MB_ENOERR )
 207:FreeModbus/mb.c ****     {
 208:FreeModbus/mb.c ****         eMBState = STATE_DISABLED;
 209:FreeModbus/mb.c ****     }
 210:FreeModbus/mb.c ****     else if( !xMBPortEventInit(  ) )
 211:FreeModbus/mb.c ****     {
 212:FreeModbus/mb.c ****         /* Port dependent event module initalization failed. */
 213:FreeModbus/mb.c ****         eStatus = MB_EPORTERR;
 214:FreeModbus/mb.c ****     }
 215:FreeModbus/mb.c ****     else
 216:FreeModbus/mb.c ****     {
 217:FreeModbus/mb.c ****         pvMBFrameStartCur = eMBTCPStart;
 218:FreeModbus/mb.c ****         pvMBFrameStopCur = eMBTCPStop;
 219:FreeModbus/mb.c ****         peMBFrameReceiveCur = eMBTCPReceive;
 220:FreeModbus/mb.c ****         peMBFrameSendCur = eMBTCPSend;
 221:FreeModbus/mb.c ****         pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBTCPPortClose : NULL;
 222:FreeModbus/mb.c ****         ucMBAddress = MB_TCP_PSEUDO_ADDRESS;
 223:FreeModbus/mb.c ****         eMBCurrentMode = MB_TCP;
 224:FreeModbus/mb.c ****         eMBState = STATE_DISABLED;
 225:FreeModbus/mb.c ****     }
 226:FreeModbus/mb.c ****     return eStatus;
 227:FreeModbus/mb.c **** }
 228:FreeModbus/mb.c **** #endif
 229:FreeModbus/mb.c **** 
 230:FreeModbus/mb.c **** eMBErrorCode
 231:FreeModbus/mb.c **** eMBRegisterCB( UCHAR ucFunctionCode, pxMBFunctionHandler pxHandler )
 232:FreeModbus/mb.c **** {
 183              		.loc 1 232 1 is_stmt 1 view -0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187              		.loc 1 232 1 is_stmt 0 view .LVU45
 188 0000 38B5     		push	{r3, r4, r5, lr}
 189              	.LCFI1:
 190              		.cfi_def_cfa_offset 16
 191              		.cfi_offset 3, -16
 192              		.cfi_offset 4, -12
 193              		.cfi_offset 5, -8
 194              		.cfi_offset 14, -4
 233:FreeModbus/mb.c ****     int             i;
 195              		.loc 1 233 5 is_stmt 1 view .LVU46
 234:FreeModbus/mb.c ****     eMBErrorCode    eStatus;
 196              		.loc 1 234 5 view .LVU47
 235:FreeModbus/mb.c **** 
 236:FreeModbus/mb.c ****     if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
 197              		.loc 1 236 5 view .LVU48
 198              		.loc 1 236 32 is_stmt 0 view .LVU49
 199 0002 43B2     		sxtb	r3, r0
 200              		.loc 1 236 7 view .LVU50
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 9


 201 0004 002B     		cmp	r3, #0
 202 0006 33DD     		ble	.L21
 203 0008 0546     		mov	r5, r0
 204 000a 0C46     		mov	r4, r1
 237:FreeModbus/mb.c ****     {
 238:FreeModbus/mb.c ****         ENTER_CRITICAL_SECTION(  );
 205              		.loc 1 238 9 is_stmt 1 view .LVU51
 206 000c FFF7FEFF 		bl	__critical_enter
 207              	.LVL11:
 239:FreeModbus/mb.c ****         if( pxHandler != NULL )
 208              		.loc 1 239 9 view .LVU52
 209              		.loc 1 239 11 is_stmt 0 view .LVU53
 210 0010 5CB1     		cbz	r4, .L25
 240:FreeModbus/mb.c ****         {
 241:FreeModbus/mb.c ****             for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 211              		.loc 1 241 20 view .LVU54
 212 0012 0023     		movs	r3, #0
 213              	.L12:
 214              	.LVL12:
 215              		.loc 1 241 25 is_stmt 1 discriminator 1 view .LVU55
 216              		.loc 1 241 13 is_stmt 0 discriminator 1 view .LVU56
 217 0014 0F2B     		cmp	r3, #15
 218 0016 18DC     		bgt	.L16
 242:FreeModbus/mb.c ****             {
 243:FreeModbus/mb.c ****                 if( ( xFuncHandlers[i].pxHandler == NULL ) ||
 219              		.loc 1 243 17 is_stmt 1 view .LVU57
 220              		.loc 1 243 39 is_stmt 0 view .LVU58
 221 0018 164A     		ldr	r2, .L28
 222 001a 02EBC302 		add	r2, r2, r3, lsl #3
 223 001e 5268     		ldr	r2, [r2, #4]
 224              		.loc 1 243 19 view .LVU59
 225 0020 6AB1     		cbz	r2, .L14
 226              		.loc 1 243 60 discriminator 1 view .LVU60
 227 0022 A242     		cmp	r2, r4
 228 0024 0BD0     		beq	.L14
 241:FreeModbus/mb.c ****             {
 229              		.loc 1 241 51 is_stmt 1 discriminator 2 view .LVU61
 241:FreeModbus/mb.c ****             {
 230              		.loc 1 241 52 is_stmt 0 discriminator 2 view .LVU62
 231 0026 0133     		adds	r3, r3, #1
 232              	.LVL13:
 241:FreeModbus/mb.c ****             {
 233              		.loc 1 241 52 discriminator 2 view .LVU63
 234 0028 F4E7     		b	.L12
 235              	.LVL14:
 236              	.L25:
 244:FreeModbus/mb.c ****                     ( xFuncHandlers[i].pxHandler == pxHandler ) )
 245:FreeModbus/mb.c ****                 {
 246:FreeModbus/mb.c ****                     xFuncHandlers[i].ucFunctionCode = ucFunctionCode;
 247:FreeModbus/mb.c ****                     xFuncHandlers[i].pxHandler = pxHandler;
 248:FreeModbus/mb.c ****                     break;
 249:FreeModbus/mb.c ****                 }
 250:FreeModbus/mb.c ****             }
 251:FreeModbus/mb.c ****             eStatus = ( i != MB_FUNC_HANDLERS_MAX ) ? MB_ENOERR : MB_ENORES;
 252:FreeModbus/mb.c ****         }
 253:FreeModbus/mb.c ****         else
 254:FreeModbus/mb.c ****         {
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 10


 255:FreeModbus/mb.c ****             for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 237              		.loc 1 255 20 view .LVU64
 238 002a 0023     		movs	r3, #0
 239              	.L13:
 240              	.LVL15:
 241              		.loc 1 255 25 is_stmt 1 discriminator 1 view .LVU65
 242              		.loc 1 255 13 is_stmt 0 discriminator 1 view .LVU66
 243 002c 0F2B     		cmp	r3, #15
 244 002e 1BDC     		bgt	.L26
 256:FreeModbus/mb.c ****             {
 257:FreeModbus/mb.c ****                 if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 245              		.loc 1 257 17 is_stmt 1 view .LVU67
 246              		.loc 1 257 37 is_stmt 0 view .LVU68
 247 0030 104A     		ldr	r2, .L28
 248 0032 12F83320 		ldrb	r2, [r2, r3, lsl #3]	@ zero_extendqisi2
 249              		.loc 1 257 19 view .LVU69
 250 0036 AA42     		cmp	r2, r5
 251 0038 0ED0     		beq	.L27
 255:FreeModbus/mb.c ****             {
 252              		.loc 1 255 51 is_stmt 1 discriminator 2 view .LVU70
 255:FreeModbus/mb.c ****             {
 253              		.loc 1 255 52 is_stmt 0 discriminator 2 view .LVU71
 254 003a 0133     		adds	r3, r3, #1
 255              	.LVL16:
 255:FreeModbus/mb.c ****             {
 256              		.loc 1 255 52 discriminator 2 view .LVU72
 257 003c F6E7     		b	.L13
 258              	.L14:
 246:FreeModbus/mb.c ****                     xFuncHandlers[i].pxHandler = pxHandler;
 259              		.loc 1 246 21 is_stmt 1 view .LVU73
 246:FreeModbus/mb.c ****                     xFuncHandlers[i].pxHandler = pxHandler;
 260              		.loc 1 246 53 is_stmt 0 view .LVU74
 261 003e 0D4A     		ldr	r2, .L28
 262 0040 02F83350 		strb	r5, [r2, r3, lsl #3]
 247:FreeModbus/mb.c ****                     break;
 263              		.loc 1 247 21 is_stmt 1 view .LVU75
 247:FreeModbus/mb.c ****                     break;
 264              		.loc 1 247 48 is_stmt 0 view .LVU76
 265 0044 02EBC302 		add	r2, r2, r3, lsl #3
 266 0048 5460     		str	r4, [r2, #4]
 248:FreeModbus/mb.c ****                 }
 267              		.loc 1 248 21 is_stmt 1 view .LVU77
 268              	.L16:
 251:FreeModbus/mb.c ****         }
 269              		.loc 1 251 13 view .LVU78
 251:FreeModbus/mb.c ****         }
 270              		.loc 1 251 65 is_stmt 0 view .LVU79
 271 004a 102B     		cmp	r3, #16
 272 004c 0ED0     		beq	.L23
 273 004e 0024     		movs	r4, #0
 274              	.LVL17:
 275              	.L18:
 258:FreeModbus/mb.c ****                 {
 259:FreeModbus/mb.c ****                     xFuncHandlers[i].ucFunctionCode = 0;
 260:FreeModbus/mb.c ****                     xFuncHandlers[i].pxHandler = NULL;
 261:FreeModbus/mb.c ****                     break;
 262:FreeModbus/mb.c ****                 }
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 11


 263:FreeModbus/mb.c ****             }
 264:FreeModbus/mb.c ****             /* Remove can't fail. */
 265:FreeModbus/mb.c ****             eStatus = MB_ENOERR;
 266:FreeModbus/mb.c ****         }
 267:FreeModbus/mb.c ****         EXIT_CRITICAL_SECTION(  );
 276              		.loc 1 267 9 is_stmt 1 view .LVU80
 277 0050 FFF7FEFF 		bl	__critical_exit
 278              	.LVL18:
 279              	.L11:
 268:FreeModbus/mb.c ****     }
 269:FreeModbus/mb.c ****     else
 270:FreeModbus/mb.c ****     {
 271:FreeModbus/mb.c ****         eStatus = MB_EINVAL;
 272:FreeModbus/mb.c ****     }
 273:FreeModbus/mb.c ****     return eStatus;
 280              		.loc 1 273 5 view .LVU81
 274:FreeModbus/mb.c **** }
 281              		.loc 1 274 1 is_stmt 0 view .LVU82
 282 0054 2046     		mov	r0, r4
 283 0056 38BD     		pop	{r3, r4, r5, pc}
 284              	.LVL19:
 285              	.L27:
 259:FreeModbus/mb.c ****                     xFuncHandlers[i].pxHandler = NULL;
 286              		.loc 1 259 21 is_stmt 1 view .LVU83
 259:FreeModbus/mb.c ****                     xFuncHandlers[i].pxHandler = NULL;
 287              		.loc 1 259 53 is_stmt 0 view .LVU84
 288 0058 064A     		ldr	r2, .L28
 289 005a 0024     		movs	r4, #0
 290              	.LVL20:
 259:FreeModbus/mb.c ****                     xFuncHandlers[i].pxHandler = NULL;
 291              		.loc 1 259 53 view .LVU85
 292 005c 02F83340 		strb	r4, [r2, r3, lsl #3]
 260:FreeModbus/mb.c ****                     break;
 293              		.loc 1 260 21 is_stmt 1 view .LVU86
 260:FreeModbus/mb.c ****                     break;
 294              		.loc 1 260 48 is_stmt 0 view .LVU87
 295 0060 02EBC303 		add	r3, r2, r3, lsl #3
 296              	.LVL21:
 260:FreeModbus/mb.c ****                     break;
 297              		.loc 1 260 48 view .LVU88
 298 0064 5C60     		str	r4, [r3, #4]
 261:FreeModbus/mb.c ****                 }
 299              		.loc 1 261 21 is_stmt 1 view .LVU89
 300 0066 F3E7     		b	.L18
 301              	.LVL22:
 302              	.L26:
 265:FreeModbus/mb.c ****         }
 303              		.loc 1 265 21 is_stmt 0 view .LVU90
 304 0068 0024     		movs	r4, #0
 305              	.LVL23:
 265:FreeModbus/mb.c ****         }
 306              		.loc 1 265 21 view .LVU91
 307 006a F1E7     		b	.L18
 308              	.LVL24:
 309              	.L23:
 251:FreeModbus/mb.c ****         }
 310              		.loc 1 251 65 view .LVU92
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 12


 311 006c 0424     		movs	r4, #4
 312              	.LVL25:
 251:FreeModbus/mb.c ****         }
 313              		.loc 1 251 65 view .LVU93
 314 006e EFE7     		b	.L18
 315              	.LVL26:
 316              	.L21:
 271:FreeModbus/mb.c ****     }
 317              		.loc 1 271 17 view .LVU94
 318 0070 0224     		movs	r4, #2
 319 0072 EFE7     		b	.L11
 320              	.L29:
 321              		.align	2
 322              	.L28:
 323 0074 00000000 		.word	.LANCHOR11
 324              		.cfi_endproc
 325              	.LFE66:
 327              		.section	.text.eMBClose,"ax",%progbits
 328              		.align	1
 329              		.global	eMBClose
 330              		.syntax unified
 331              		.thumb
 332              		.thumb_func
 334              	eMBClose:
 335              	.LFB67:
 275:FreeModbus/mb.c **** 
 276:FreeModbus/mb.c **** 
 277:FreeModbus/mb.c **** eMBErrorCode
 278:FreeModbus/mb.c **** eMBClose( void )
 279:FreeModbus/mb.c **** {
 336              		.loc 1 279 1 is_stmt 1 view -0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340 0000 08B5     		push	{r3, lr}
 341              	.LCFI2:
 342              		.cfi_def_cfa_offset 8
 343              		.cfi_offset 3, -8
 344              		.cfi_offset 14, -4
 280:FreeModbus/mb.c ****     eMBErrorCode    eStatus = MB_ENOERR;
 345              		.loc 1 280 5 view .LVU96
 346              	.LVL27:
 281:FreeModbus/mb.c **** 
 282:FreeModbus/mb.c ****     if( eMBState == STATE_DISABLED )
 347              		.loc 1 282 5 view .LVU97
 348              		.loc 1 282 18 is_stmt 0 view .LVU98
 349 0002 074B     		ldr	r3, .L36
 350 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 351              		.loc 1 282 7 view .LVU99
 352 0006 012B     		cmp	r3, #1
 353 0008 01D0     		beq	.L35
 283:FreeModbus/mb.c ****     {
 284:FreeModbus/mb.c ****         if( pvMBFrameCloseCur != NULL )
 285:FreeModbus/mb.c ****         {
 286:FreeModbus/mb.c ****             pvMBFrameCloseCur(  );
 287:FreeModbus/mb.c ****         }
 288:FreeModbus/mb.c ****     }
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 13


 289:FreeModbus/mb.c ****     else
 290:FreeModbus/mb.c ****     {
 291:FreeModbus/mb.c ****         eStatus = MB_EILLSTATE;
 354              		.loc 1 291 17 view .LVU100
 355 000a 0620     		movs	r0, #6
 356              	.L31:
 357              	.LVL28:
 292:FreeModbus/mb.c ****     }
 293:FreeModbus/mb.c ****     return eStatus;
 358              		.loc 1 293 5 is_stmt 1 view .LVU101
 294:FreeModbus/mb.c **** }
 359              		.loc 1 294 1 is_stmt 0 view .LVU102
 360 000c 08BD     		pop	{r3, pc}
 361              	.LVL29:
 362              	.L35:
 284:FreeModbus/mb.c ****         {
 363              		.loc 1 284 9 is_stmt 1 view .LVU103
 284:FreeModbus/mb.c ****         {
 364              		.loc 1 284 31 is_stmt 0 view .LVU104
 365 000e 054B     		ldr	r3, .L36+4
 366 0010 1B68     		ldr	r3, [r3]
 284:FreeModbus/mb.c ****         {
 367              		.loc 1 284 11 view .LVU105
 368 0012 13B1     		cbz	r3, .L33
 286:FreeModbus/mb.c ****         }
 369              		.loc 1 286 13 is_stmt 1 view .LVU106
 370 0014 9847     		blx	r3
 371              	.LVL30:
 280:FreeModbus/mb.c **** 
 372              		.loc 1 280 21 is_stmt 0 view .LVU107
 373 0016 0020     		movs	r0, #0
 374 0018 F8E7     		b	.L31
 375              	.L33:
 376 001a 0020     		movs	r0, #0
 377 001c F6E7     		b	.L31
 378              	.L37:
 379 001e 00BF     		.align	2
 380              	.L36:
 381 0020 00000000 		.word	.LANCHOR10
 382 0024 00000000 		.word	.LANCHOR5
 383              		.cfi_endproc
 384              	.LFE67:
 386              		.section	.text.eMBEnable,"ax",%progbits
 387              		.align	1
 388              		.global	eMBEnable
 389              		.syntax unified
 390              		.thumb
 391              		.thumb_func
 393              	eMBEnable:
 394              	.LFB68:
 295:FreeModbus/mb.c **** 
 296:FreeModbus/mb.c **** 
 297:FreeModbus/mb.c **** eMBErrorCode
 298:FreeModbus/mb.c **** eMBEnable( void )
 299:FreeModbus/mb.c **** {
 395              		.loc 1 299 1 is_stmt 1 view -0
 396              		.cfi_startproc
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 14


 397              		@ args = 0, pretend = 0, frame = 0
 398              		@ frame_needed = 0, uses_anonymous_args = 0
 399 0000 08B5     		push	{r3, lr}
 400              	.LCFI3:
 401              		.cfi_def_cfa_offset 8
 402              		.cfi_offset 3, -8
 403              		.cfi_offset 14, -4
 300:FreeModbus/mb.c ****     eMBErrorCode    eStatus = MB_ENOERR;
 404              		.loc 1 300 5 view .LVU109
 405              	.LVL31:
 301:FreeModbus/mb.c **** 
 302:FreeModbus/mb.c ****     if( eMBState == STATE_DISABLED )
 406              		.loc 1 302 5 view .LVU110
 407              		.loc 1 302 18 is_stmt 0 view .LVU111
 408 0002 064B     		ldr	r3, .L43
 409 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 410              		.loc 1 302 7 view .LVU112
 411 0006 012B     		cmp	r3, #1
 412 0008 01D0     		beq	.L42
 303:FreeModbus/mb.c ****     {
 304:FreeModbus/mb.c ****         /* Activate the protocol stack. */
 305:FreeModbus/mb.c ****         pvMBFrameStartCur(  );
 306:FreeModbus/mb.c ****         eMBState = STATE_ENABLED;
 307:FreeModbus/mb.c ****     }
 308:FreeModbus/mb.c ****     else
 309:FreeModbus/mb.c ****     {
 310:FreeModbus/mb.c ****         eStatus = MB_EILLSTATE;
 413              		.loc 1 310 17 view .LVU113
 414 000a 0620     		movs	r0, #6
 415              	.L39:
 416              	.LVL32:
 311:FreeModbus/mb.c ****     }
 312:FreeModbus/mb.c ****     return eStatus;
 417              		.loc 1 312 5 is_stmt 1 view .LVU114
 313:FreeModbus/mb.c **** }
 418              		.loc 1 313 1 is_stmt 0 view .LVU115
 419 000c 08BD     		pop	{r3, pc}
 420              	.LVL33:
 421              	.L42:
 305:FreeModbus/mb.c ****         eMBState = STATE_ENABLED;
 422              		.loc 1 305 9 is_stmt 1 view .LVU116
 423 000e 044B     		ldr	r3, .L43+4
 424 0010 1B68     		ldr	r3, [r3]
 425 0012 9847     		blx	r3
 426              	.LVL34:
 306:FreeModbus/mb.c ****     }
 427              		.loc 1 306 9 view .LVU117
 306:FreeModbus/mb.c ****     }
 428              		.loc 1 306 18 is_stmt 0 view .LVU118
 429 0014 0020     		movs	r0, #0
 430 0016 014B     		ldr	r3, .L43
 431 0018 1870     		strb	r0, [r3]
 432 001a F7E7     		b	.L39
 433              	.L44:
 434              		.align	2
 435              	.L43:
 436 001c 00000000 		.word	.LANCHOR10
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 15


 437 0020 00000000 		.word	.LANCHOR1
 438              		.cfi_endproc
 439              	.LFE68:
 441              		.section	.text.eMBDisable,"ax",%progbits
 442              		.align	1
 443              		.global	eMBDisable
 444              		.syntax unified
 445              		.thumb
 446              		.thumb_func
 448              	eMBDisable:
 449              	.LFB69:
 314:FreeModbus/mb.c **** 
 315:FreeModbus/mb.c **** eMBErrorCode
 316:FreeModbus/mb.c **** eMBDisable( void )
 317:FreeModbus/mb.c **** {
 450              		.loc 1 317 1 is_stmt 1 view -0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 0
 453              		@ frame_needed = 0, uses_anonymous_args = 0
 454 0000 10B5     		push	{r4, lr}
 455              	.LCFI4:
 456              		.cfi_def_cfa_offset 8
 457              		.cfi_offset 4, -8
 458              		.cfi_offset 14, -4
 318:FreeModbus/mb.c ****     eMBErrorCode    eStatus;
 459              		.loc 1 318 5 view .LVU120
 319:FreeModbus/mb.c **** 
 320:FreeModbus/mb.c ****     if( eMBState == STATE_ENABLED )
 460              		.loc 1 320 5 view .LVU121
 461              		.loc 1 320 18 is_stmt 0 view .LVU122
 462 0002 084B     		ldr	r3, .L51
 463 0004 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 464              		.loc 1 320 7 view .LVU123
 465 0006 3CB9     		cbnz	r4, .L46
 321:FreeModbus/mb.c ****     {
 322:FreeModbus/mb.c ****         pvMBFrameStopCur(  );
 466              		.loc 1 322 9 is_stmt 1 view .LVU124
 467 0008 074B     		ldr	r3, .L51+4
 468 000a 1B68     		ldr	r3, [r3]
 469 000c 9847     		blx	r3
 470              	.LVL35:
 323:FreeModbus/mb.c ****         eMBState = STATE_DISABLED;
 471              		.loc 1 323 9 view .LVU125
 472              		.loc 1 323 18 is_stmt 0 view .LVU126
 473 000e 054B     		ldr	r3, .L51
 474 0010 0122     		movs	r2, #1
 475 0012 1A70     		strb	r2, [r3]
 324:FreeModbus/mb.c ****         eStatus = MB_ENOERR;
 476              		.loc 1 324 9 is_stmt 1 view .LVU127
 477              	.LVL36:
 478              	.L47:
 325:FreeModbus/mb.c ****     }
 326:FreeModbus/mb.c ****     else if( eMBState == STATE_DISABLED )
 327:FreeModbus/mb.c ****     {
 328:FreeModbus/mb.c ****         eStatus = MB_ENOERR;
 329:FreeModbus/mb.c ****     }
 330:FreeModbus/mb.c ****     else
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 16


 331:FreeModbus/mb.c ****     {
 332:FreeModbus/mb.c ****         eStatus = MB_EILLSTATE;
 333:FreeModbus/mb.c ****     }
 334:FreeModbus/mb.c ****     return eStatus;
 479              		.loc 1 334 5 view .LVU128
 335:FreeModbus/mb.c **** }
 480              		.loc 1 335 1 is_stmt 0 view .LVU129
 481 0014 2046     		mov	r0, r4
 482 0016 10BD     		pop	{r4, pc}
 483              	.LVL37:
 484              	.L46:
 326:FreeModbus/mb.c ****     {
 485              		.loc 1 326 10 is_stmt 1 view .LVU130
 326:FreeModbus/mb.c ****     {
 486              		.loc 1 326 12 is_stmt 0 view .LVU131
 487 0018 012C     		cmp	r4, #1
 488 001a 01D0     		beq	.L50
 332:FreeModbus/mb.c ****     }
 489              		.loc 1 332 17 view .LVU132
 490 001c 0624     		movs	r4, #6
 491 001e F9E7     		b	.L47
 492              	.L50:
 328:FreeModbus/mb.c ****     }
 493              		.loc 1 328 17 view .LVU133
 494 0020 0024     		movs	r4, #0
 495 0022 F7E7     		b	.L47
 496              	.L52:
 497              		.align	2
 498              	.L51:
 499 0024 00000000 		.word	.LANCHOR10
 500 0028 00000000 		.word	.LANCHOR2
 501              		.cfi_endproc
 502              	.LFE69:
 504              		.section	.text.eMBPoll,"ax",%progbits
 505              		.align	1
 506              		.global	eMBPoll
 507              		.syntax unified
 508              		.thumb
 509              		.thumb_func
 511              	eMBPoll:
 512              	.LFB70:
 336:FreeModbus/mb.c **** 
 337:FreeModbus/mb.c **** eMBErrorCode eMBPoll( void )
 338:FreeModbus/mb.c **** {
 513              		.loc 1 338 1 is_stmt 1 view -0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 8
 516              		@ frame_needed = 0, uses_anonymous_args = 0
 517 0000 30B5     		push	{r4, r5, lr}
 518              	.LCFI5:
 519              		.cfi_def_cfa_offset 12
 520              		.cfi_offset 4, -12
 521              		.cfi_offset 5, -8
 522              		.cfi_offset 14, -4
 523 0002 83B0     		sub	sp, sp, #12
 524              	.LCFI6:
 525              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 17


 339:FreeModbus/mb.c ****     static UCHAR   *ucMBFrame;
 526              		.loc 1 339 5 view .LVU135
 340:FreeModbus/mb.c ****     static UCHAR    ucRcvAddress;
 527              		.loc 1 340 5 view .LVU136
 341:FreeModbus/mb.c ****     static UCHAR    ucFunctionCode;
 528              		.loc 1 341 5 view .LVU137
 342:FreeModbus/mb.c ****     static USHORT   usLength;
 529              		.loc 1 342 5 view .LVU138
 343:FreeModbus/mb.c ****     static eMBException eException;
 530              		.loc 1 343 5 view .LVU139
 344:FreeModbus/mb.c **** 
 345:FreeModbus/mb.c ****     int             i;
 531              		.loc 1 345 5 view .LVU140
 346:FreeModbus/mb.c ****     eMBErrorCode    eStatus = MB_ENOERR;
 532              		.loc 1 346 5 view .LVU141
 533              	.LVL38:
 347:FreeModbus/mb.c ****     eMBEventType    eEvent;
 534              		.loc 1 347 5 view .LVU142
 348:FreeModbus/mb.c **** 
 349:FreeModbus/mb.c ****     /* Check if the protocol stack is ready. */
 350:FreeModbus/mb.c ****     if( eMBState != STATE_ENABLED )
 535              		.loc 1 350 5 view .LVU143
 536              		.loc 1 350 18 is_stmt 0 view .LVU144
 537 0004 364B     		ldr	r3, .L69
 538 0006 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 539              		.loc 1 350 7 view .LVU145
 540 0008 002C     		cmp	r4, #0
 541 000a 63D1     		bne	.L63
 351:FreeModbus/mb.c ****     {
 352:FreeModbus/mb.c ****         return MB_EILLSTATE;
 353:FreeModbus/mb.c ****     }
 354:FreeModbus/mb.c **** 
 355:FreeModbus/mb.c ****     /* Check if there is a event available. If not return control to caller.
 356:FreeModbus/mb.c ****      * Otherwise we will handle the event. */
 357:FreeModbus/mb.c ****     if( xMBPortEventGet( &eEvent ) == TRUE )
 542              		.loc 1 357 5 is_stmt 1 view .LVU146
 543              		.loc 1 357 9 is_stmt 0 view .LVU147
 544 000c 0DF10700 		add	r0, sp, #7
 545 0010 FFF7FEFF 		bl	xMBPortEventGet
 546              	.LVL39:
 547              		.loc 1 357 7 view .LVU148
 548 0014 0128     		cmp	r0, #1
 549 0016 02D0     		beq	.L67
 550              	.LVL40:
 551              	.L54:
 358:FreeModbus/mb.c ****     {
 359:FreeModbus/mb.c ****         switch ( eEvent )
 360:FreeModbus/mb.c ****         {
 361:FreeModbus/mb.c ****         case EV_READY:
 362:FreeModbus/mb.c ****             break;
 363:FreeModbus/mb.c **** 
 364:FreeModbus/mb.c ****         case EV_FRAME_RECEIVED:
 365:FreeModbus/mb.c ****             eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 366:FreeModbus/mb.c ****             if( eStatus == MB_ENOERR )
 367:FreeModbus/mb.c ****             {
 368:FreeModbus/mb.c ****                 /* Check if the frame is for us. If not ignore the frame. */
 369:FreeModbus/mb.c ****                 if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 18


 370:FreeModbus/mb.c ****                 {
 371:FreeModbus/mb.c ****                     ( void )xMBPortEventPost( EV_EXECUTE );
 372:FreeModbus/mb.c ****                 }
 373:FreeModbus/mb.c ****             }
 374:FreeModbus/mb.c ****             break;
 375:FreeModbus/mb.c **** 
 376:FreeModbus/mb.c ****         case EV_EXECUTE:
 377:FreeModbus/mb.c ****             ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 378:FreeModbus/mb.c ****             eException = MB_EX_ILLEGAL_FUNCTION;
 379:FreeModbus/mb.c ****             #if (DEBUG == 1)
 380:FreeModbus/mb.c ****                 printf("FuncCode: %d\n", ucFunctionCode);
 381:FreeModbus/mb.c ****             #endif
 382:FreeModbus/mb.c ****             for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 383:FreeModbus/mb.c ****             {
 384:FreeModbus/mb.c ****                 /* No more function handlers registered. Abort. */
 385:FreeModbus/mb.c ****                 if( xFuncHandlers[i].ucFunctionCode == 0 )
 386:FreeModbus/mb.c ****                 {
 387:FreeModbus/mb.c ****                     break;
 388:FreeModbus/mb.c ****                 }
 389:FreeModbus/mb.c ****                 else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 390:FreeModbus/mb.c ****                 {
 391:FreeModbus/mb.c ****                     eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 392:FreeModbus/mb.c ****                     break;
 393:FreeModbus/mb.c ****                 }
 394:FreeModbus/mb.c ****             }
 395:FreeModbus/mb.c **** 
 396:FreeModbus/mb.c ****             /* If the request was not sent to the broadcast address we
 397:FreeModbus/mb.c ****              * return a reply. */
 398:FreeModbus/mb.c ****             if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 399:FreeModbus/mb.c ****             {
 400:FreeModbus/mb.c ****                 if( eException != MB_EX_NONE )
 401:FreeModbus/mb.c ****                 {
 402:FreeModbus/mb.c ****                     /* An exception occured. Build an error frame. */
 403:FreeModbus/mb.c ****                     usLength = 0;
 404:FreeModbus/mb.c ****                     ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 405:FreeModbus/mb.c ****                     ucMBFrame[usLength++] = eException;
 406:FreeModbus/mb.c ****                 }
 407:FreeModbus/mb.c ****                 eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 408:FreeModbus/mb.c ****             }
 409:FreeModbus/mb.c ****             break;
 410:FreeModbus/mb.c **** 
 411:FreeModbus/mb.c ****         case EV_FRAME_SENT:
 412:FreeModbus/mb.c ****             break;
 413:FreeModbus/mb.c ****         }
 414:FreeModbus/mb.c ****     }
 415:FreeModbus/mb.c ****     return MB_ENOERR;
 416:FreeModbus/mb.c **** }
 552              		.loc 1 416 1 view .LVU149
 553 0018 2046     		mov	r0, r4
 554 001a 03B0     		add	sp, sp, #12
 555              	.LCFI7:
 556              		.cfi_remember_state
 557              		.cfi_def_cfa_offset 12
 558              		@ sp needed
 559 001c 30BD     		pop	{r4, r5, pc}
 560              	.LVL41:
 561              	.L67:
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 19


 562              	.LCFI8:
 563              		.cfi_restore_state
 359:FreeModbus/mb.c ****         {
 564              		.loc 1 359 9 is_stmt 1 view .LVU150
 565 001e 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 566 0022 022B     		cmp	r3, #2
 567 0024 14D0     		beq	.L55
 568 0026 042B     		cmp	r3, #4
 569 0028 F6D1     		bne	.L54
 377:FreeModbus/mb.c ****             eException = MB_EX_ILLEGAL_FUNCTION;
 570              		.loc 1 377 13 view .LVU151
 377:FreeModbus/mb.c ****             eException = MB_EX_ILLEGAL_FUNCTION;
 571              		.loc 1 377 39 is_stmt 0 view .LVU152
 572 002a 2E4B     		ldr	r3, .L69+4
 573 002c 1868     		ldr	r0, [r3]
 574 002e 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 377:FreeModbus/mb.c ****             eException = MB_EX_ILLEGAL_FUNCTION;
 575              		.loc 1 377 28 view .LVU153
 576 0030 2D4B     		ldr	r3, .L69+8
 577 0032 1970     		strb	r1, [r3]
 378:FreeModbus/mb.c ****             #if (DEBUG == 1)
 578              		.loc 1 378 13 is_stmt 1 view .LVU154
 378:FreeModbus/mb.c ****             #if (DEBUG == 1)
 579              		.loc 1 378 24 is_stmt 0 view .LVU155
 580 0034 2D4B     		ldr	r3, .L69+12
 581 0036 0122     		movs	r2, #1
 582 0038 1A70     		strb	r2, [r3]
 382:FreeModbus/mb.c ****             {
 583              		.loc 1 382 13 is_stmt 1 view .LVU156
 584              	.LVL42:
 382:FreeModbus/mb.c ****             {
 585              		.loc 1 382 20 is_stmt 0 view .LVU157
 586 003a 0023     		movs	r3, #0
 587              	.LVL43:
 588              	.L58:
 382:FreeModbus/mb.c ****             {
 589              		.loc 1 382 25 is_stmt 1 discriminator 1 view .LVU158
 382:FreeModbus/mb.c ****             {
 590              		.loc 1 382 13 is_stmt 0 discriminator 1 view .LVU159
 591 003c 0F2B     		cmp	r3, #15
 592 003e 25DC     		bgt	.L59
 385:FreeModbus/mb.c ****                 {
 593              		.loc 1 385 17 is_stmt 1 view .LVU160
 385:FreeModbus/mb.c ****                 {
 594              		.loc 1 385 37 is_stmt 0 view .LVU161
 595 0040 2B4A     		ldr	r2, .L69+16
 596 0042 12F83320 		ldrb	r2, [r2, r3, lsl #3]	@ zero_extendqisi2
 385:FreeModbus/mb.c ****                 {
 597              		.loc 1 385 19 view .LVU162
 598 0046 0AB3     		cbz	r2, .L59
 389:FreeModbus/mb.c ****                 {
 599              		.loc 1 389 22 is_stmt 1 view .LVU163
 389:FreeModbus/mb.c ****                 {
 600              		.loc 1 389 24 is_stmt 0 view .LVU164
 601 0048 9142     		cmp	r1, r2
 602 004a 17D0     		beq	.L68
 382:FreeModbus/mb.c ****             {
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 20


 603              		.loc 1 382 51 is_stmt 1 discriminator 2 view .LVU165
 382:FreeModbus/mb.c ****             {
 604              		.loc 1 382 52 is_stmt 0 discriminator 2 view .LVU166
 605 004c 0133     		adds	r3, r3, #1
 606              	.LVL44:
 382:FreeModbus/mb.c ****             {
 607              		.loc 1 382 52 discriminator 2 view .LVU167
 608 004e F5E7     		b	.L58
 609              	.LVL45:
 610              	.L55:
 365:FreeModbus/mb.c ****             if( eStatus == MB_ENOERR )
 611              		.loc 1 365 13 is_stmt 1 view .LVU168
 365:FreeModbus/mb.c ****             if( eStatus == MB_ENOERR )
 612              		.loc 1 365 23 is_stmt 0 view .LVU169
 613 0050 284B     		ldr	r3, .L69+20
 614 0052 1B68     		ldr	r3, [r3]
 615 0054 284A     		ldr	r2, .L69+24
 616 0056 2349     		ldr	r1, .L69+4
 617 0058 2848     		ldr	r0, .L69+28
 618 005a 9847     		blx	r3
 619              	.LVL46:
 366:FreeModbus/mb.c ****             {
 620              		.loc 1 366 13 is_stmt 1 view .LVU170
 366:FreeModbus/mb.c ****             {
 621              		.loc 1 366 15 is_stmt 0 view .LVU171
 622 005c 0546     		mov	r5, r0
 623 005e 0028     		cmp	r0, #0
 624 0060 DAD1     		bne	.L54
 369:FreeModbus/mb.c ****                 {
 625              		.loc 1 369 17 is_stmt 1 view .LVU172
 369:FreeModbus/mb.c ****                 {
 626              		.loc 1 369 36 is_stmt 0 view .LVU173
 627 0062 264B     		ldr	r3, .L69+28
 628 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 629 0066 264A     		ldr	r2, .L69+32
 630 0068 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 369:FreeModbus/mb.c ****                 {
 631              		.loc 1 369 19 view .LVU174
 632 006a 9342     		cmp	r3, r2
 633 006c 01D0     		beq	.L57
 369:FreeModbus/mb.c ****                 {
 634              		.loc 1 369 53 discriminator 1 view .LVU175
 635 006e 002B     		cmp	r3, #0
 636 0070 32D1     		bne	.L64
 637              	.L57:
 371:FreeModbus/mb.c ****                 }
 638              		.loc 1 371 21 is_stmt 1 view .LVU176
 371:FreeModbus/mb.c ****                 }
 639              		.loc 1 371 29 is_stmt 0 view .LVU177
 640 0072 0420     		movs	r0, #4
 641              	.LVL47:
 371:FreeModbus/mb.c ****                 }
 642              		.loc 1 371 29 view .LVU178
 643 0074 FFF7FEFF 		bl	xMBPortEventPost
 644              	.LVL48:
 415:FreeModbus/mb.c **** }
 645              		.loc 1 415 12 view .LVU179
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 21


 646 0078 2C46     		mov	r4, r5
 647 007a CDE7     		b	.L54
 648              	.LVL49:
 649              	.L68:
 391:FreeModbus/mb.c ****                     break;
 650              		.loc 1 391 21 is_stmt 1 view .LVU180
 391:FreeModbus/mb.c ****                     break;
 651              		.loc 1 391 50 is_stmt 0 view .LVU181
 652 007c 1C4A     		ldr	r2, .L69+16
 653 007e 02EBC303 		add	r3, r2, r3, lsl #3
 654              	.LVL50:
 391:FreeModbus/mb.c ****                     break;
 655              		.loc 1 391 50 view .LVU182
 656 0082 5B68     		ldr	r3, [r3, #4]
 391:FreeModbus/mb.c ****                     break;
 657              		.loc 1 391 34 view .LVU183
 658 0084 1C49     		ldr	r1, .L69+24
 659 0086 9847     		blx	r3
 660              	.LVL51:
 391:FreeModbus/mb.c ****                     break;
 661              		.loc 1 391 32 view .LVU184
 662 0088 184B     		ldr	r3, .L69+12
 663 008a 1870     		strb	r0, [r3]
 392:FreeModbus/mb.c ****                 }
 664              		.loc 1 392 21 is_stmt 1 view .LVU185
 665              	.L59:
 398:FreeModbus/mb.c ****             {
 666              		.loc 1 398 13 view .LVU186
 398:FreeModbus/mb.c ****             {
 667              		.loc 1 398 30 is_stmt 0 view .LVU187
 668 008c 1B4B     		ldr	r3, .L69+28
 669 008e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 398:FreeModbus/mb.c ****             {
 670              		.loc 1 398 15 view .LVU188
 671 0090 23B3     		cbz	r3, .L65
 400:FreeModbus/mb.c ****                 {
 672              		.loc 1 400 17 is_stmt 1 view .LVU189
 400:FreeModbus/mb.c ****                 {
 673              		.loc 1 400 32 is_stmt 0 view .LVU190
 674 0092 164B     		ldr	r3, .L69+12
 675 0094 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 400:FreeModbus/mb.c ****                 {
 676              		.loc 1 400 19 view .LVU191
 677 0096 9BB1     		cbz	r3, .L62
 403:FreeModbus/mb.c ****                     ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 678              		.loc 1 403 21 is_stmt 1 view .LVU192
 403:FreeModbus/mb.c ****                     ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 679              		.loc 1 403 30 is_stmt 0 view .LVU193
 680 0098 174A     		ldr	r2, .L69+24
 681 009a 0021     		movs	r1, #0
 682 009c 1180     		strh	r1, [r2]	@ movhi
 404:FreeModbus/mb.c ****                     ucMBFrame[usLength++] = eException;
 683              		.loc 1 404 21 is_stmt 1 view .LVU194
 404:FreeModbus/mb.c ****                     ucMBFrame[usLength++] = eException;
 684              		.loc 1 404 45 is_stmt 0 view .LVU195
 685 009e 1249     		ldr	r1, .L69+8
 686 00a0 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 22


 404:FreeModbus/mb.c ****                     ucMBFrame[usLength++] = eException;
 687              		.loc 1 404 30 view .LVU196
 688 00a2 1048     		ldr	r0, .L69+4
 689 00a4 0568     		ldr	r5, [r0]
 404:FreeModbus/mb.c ****                     ucMBFrame[usLength++] = eException;
 690              		.loc 1 404 39 view .LVU197
 691 00a6 4FF0010C 		mov	ip, #1
 692 00aa A2F800C0 		strh	ip, [r2]	@ movhi
 404:FreeModbus/mb.c ****                     ucMBFrame[usLength++] = eException;
 693              		.loc 1 404 45 view .LVU198
 694 00ae 41F08001 		orr	r1, r1, #128
 404:FreeModbus/mb.c ****                     ucMBFrame[usLength++] = eException;
 695              		.loc 1 404 43 view .LVU199
 696 00b2 2970     		strb	r1, [r5]
 405:FreeModbus/mb.c ****                 }
 697              		.loc 1 405 21 is_stmt 1 view .LVU200
 405:FreeModbus/mb.c ****                 }
 698              		.loc 1 405 30 is_stmt 0 view .LVU201
 699 00b4 0068     		ldr	r0, [r0]
 405:FreeModbus/mb.c ****                 }
 700              		.loc 1 405 39 view .LVU202
 701 00b6 1188     		ldrh	r1, [r2]
 702 00b8 01EB0C05 		add	r5, r1, ip
 703 00bc 1580     		strh	r5, [r2]	@ movhi
 405:FreeModbus/mb.c ****                 }
 704              		.loc 1 405 43 view .LVU203
 705 00be 4354     		strb	r3, [r0, r1]
 706              	.L62:
 407:FreeModbus/mb.c ****             }
 707              		.loc 1 407 17 is_stmt 1 view .LVU204
 407:FreeModbus/mb.c ****             }
 708              		.loc 1 407 27 is_stmt 0 view .LVU205
 709 00c0 104B     		ldr	r3, .L69+36
 710 00c2 1B68     		ldr	r3, [r3]
 711 00c4 0C4A     		ldr	r2, .L69+24
 712 00c6 1288     		ldrh	r2, [r2]
 713 00c8 0649     		ldr	r1, .L69+4
 714 00ca 0968     		ldr	r1, [r1]
 715 00cc 0C48     		ldr	r0, .L69+32
 716 00ce 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 717 00d0 9847     		blx	r3
 718              	.LVL52:
 407:FreeModbus/mb.c ****             }
 719              		.loc 1 407 27 view .LVU206
 720 00d2 A1E7     		b	.L54
 721              	.LVL53:
 722              	.L63:
 352:FreeModbus/mb.c ****     }
 723              		.loc 1 352 16 view .LVU207
 724 00d4 0624     		movs	r4, #6
 725 00d6 9FE7     		b	.L54
 726              	.LVL54:
 727              	.L64:
 415:FreeModbus/mb.c **** }
 728              		.loc 1 415 12 view .LVU208
 729 00d8 0446     		mov	r4, r0
 730 00da 9DE7     		b	.L54
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 23


 731              	.LVL55:
 732              	.L65:
 415:FreeModbus/mb.c **** }
 733              		.loc 1 415 12 view .LVU209
 734 00dc 1C46     		mov	r4, r3
 735 00de 9BE7     		b	.L54
 736              	.L70:
 737              		.align	2
 738              	.L69:
 739 00e0 00000000 		.word	.LANCHOR10
 740 00e4 00000000 		.word	.LANCHOR13
 741 00e8 00000000 		.word	.LANCHOR15
 742 00ec 00000000 		.word	.LANCHOR16
 743 00f0 00000000 		.word	.LANCHOR11
 744 00f4 00000000 		.word	.LANCHOR4
 745 00f8 00000000 		.word	.LANCHOR12
 746 00fc 00000000 		.word	.LANCHOR14
 747 0100 00000000 		.word	.LANCHOR0
 748 0104 00000000 		.word	.LANCHOR3
 749              		.cfi_endproc
 750              	.LFE70:
 752              		.global	pxMBFrameCBTransmitFSMCur
 753              		.global	pxMBFrameCBReceiveFSMCur
 754              		.global	pxMBPortCBTimerExpired
 755              		.global	pxMBFrameCBTransmitterEmpty
 756              		.global	pxMBFrameCBByteReceived
 757              		.section	.bss.eException.0,"aw",%nobits
 758              		.set	.LANCHOR16,. + 0
 761              	eException.0:
 762 0000 00       		.space	1
 763              		.section	.bss.eMBCurrentMode,"aw",%nobits
 764              		.set	.LANCHOR9,. + 0
 767              	eMBCurrentMode:
 768 0000 00       		.space	1
 769              		.section	.bss.peMBFrameReceiveCur,"aw",%nobits
 770              		.align	2
 771              		.set	.LANCHOR4,. + 0
 774              	peMBFrameReceiveCur:
 775 0000 00000000 		.space	4
 776              		.section	.bss.peMBFrameSendCur,"aw",%nobits
 777              		.align	2
 778              		.set	.LANCHOR3,. + 0
 781              	peMBFrameSendCur:
 782 0000 00000000 		.space	4
 783              		.section	.bss.pvMBFrameCloseCur,"aw",%nobits
 784              		.align	2
 785              		.set	.LANCHOR5,. + 0
 788              	pvMBFrameCloseCur:
 789 0000 00000000 		.space	4
 790              		.section	.bss.pvMBFrameStartCur,"aw",%nobits
 791              		.align	2
 792              		.set	.LANCHOR1,. + 0
 795              	pvMBFrameStartCur:
 796 0000 00000000 		.space	4
 797              		.section	.bss.pvMBFrameStopCur,"aw",%nobits
 798              		.align	2
 799              		.set	.LANCHOR2,. + 0
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 24


 802              	pvMBFrameStopCur:
 803 0000 00000000 		.space	4
 804              		.section	.bss.pxMBFrameCBByteReceived,"aw",%nobits
 805              		.align	2
 806              		.set	.LANCHOR6,. + 0
 809              	pxMBFrameCBByteReceived:
 810 0000 00000000 		.space	4
 811              		.section	.bss.pxMBFrameCBReceiveFSMCur,"aw",%nobits
 812              		.align	2
 815              	pxMBFrameCBReceiveFSMCur:
 816 0000 00000000 		.space	4
 817              		.section	.bss.pxMBFrameCBTransmitFSMCur,"aw",%nobits
 818              		.align	2
 821              	pxMBFrameCBTransmitFSMCur:
 822 0000 00000000 		.space	4
 823              		.section	.bss.pxMBFrameCBTransmitterEmpty,"aw",%nobits
 824              		.align	2
 825              		.set	.LANCHOR7,. + 0
 828              	pxMBFrameCBTransmitterEmpty:
 829 0000 00000000 		.space	4
 830              		.section	.bss.pxMBPortCBTimerExpired,"aw",%nobits
 831              		.align	2
 832              		.set	.LANCHOR8,. + 0
 835              	pxMBPortCBTimerExpired:
 836 0000 00000000 		.space	4
 837              		.section	.bss.ucFunctionCode.1,"aw",%nobits
 838              		.set	.LANCHOR15,. + 0
 841              	ucFunctionCode.1:
 842 0000 00       		.space	1
 843              		.section	.bss.ucMBAddress,"aw",%nobits
 844              		.set	.LANCHOR0,. + 0
 847              	ucMBAddress:
 848 0000 00       		.space	1
 849              		.section	.bss.ucMBFrame.3,"aw",%nobits
 850              		.align	2
 851              		.set	.LANCHOR13,. + 0
 854              	ucMBFrame.3:
 855 0000 00000000 		.space	4
 856              		.section	.bss.ucRcvAddress.4,"aw",%nobits
 857              		.set	.LANCHOR14,. + 0
 860              	ucRcvAddress.4:
 861 0000 00       		.space	1
 862              		.section	.bss.usLength.2,"aw",%nobits
 863              		.align	1
 864              		.set	.LANCHOR12,. + 0
 867              	usLength.2:
 868 0000 0000     		.space	2
 869              		.section	.data.eMBState,"aw"
 870              		.set	.LANCHOR10,. + 0
 873              	eMBState:
 874 0000 02       		.byte	2
 875              		.section	.data.xFuncHandlers,"aw"
 876              		.align	2
 877              		.set	.LANCHOR11,. + 0
 880              	xFuncHandlers:
 881 0000 11       		.byte	17
 882 0001 000000   		.space	3
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 25


 883 0004 00000000 		.word	eMBFuncReportSlaveID
 884 0008 04       		.byte	4
 885 0009 000000   		.space	3
 886 000c 00000000 		.word	eMBFuncReadInputRegister
 887 0010 03       		.byte	3
 888 0011 000000   		.space	3
 889 0014 00000000 		.word	eMBFuncReadHoldingRegister
 890 0018 10       		.byte	16
 891 0019 000000   		.space	3
 892 001c 00000000 		.word	eMBFuncWriteMultipleHoldingRegister
 893 0020 06       		.byte	6
 894 0021 000000   		.space	3
 895 0024 00000000 		.word	eMBFuncWriteHoldingRegister
 896 0028 17       		.byte	23
 897 0029 000000   		.space	3
 898 002c 00000000 		.word	eMBFuncReadWriteMultipleHoldingRegister
 899 0030 01       		.byte	1
 900 0031 000000   		.space	3
 901 0034 00000000 		.word	eMBFuncReadCoils
 902 0038 05       		.byte	5
 903 0039 000000   		.space	3
 904 003c 00000000 		.word	eMBFuncWriteCoil
 905 0040 0F       		.byte	15
 906 0041 000000   		.space	3
 907 0044 00000000 		.word	eMBFuncWriteMultipleCoils
 908 0048 02       		.byte	2
 909 0049 000000   		.space	3
 910 004c 00000000 		.word	eMBFuncReadDiscreteInputs
 911 0050 00000000 		.space	48
 911      00000000 
 911      00000000 
 911      00000000 
 911      00000000 
 912              		.text
 913              	.Letext0:
 914              		.file 2 "e:\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\machine\\_default_typ
 915              		.file 3 "e:\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\sys\\_stdint.h"
 916              		.file 4 "FreeModbus/port/port.h"
 917              		.file 5 "FreeModbus/include/mbport.h"
 918              		.file 6 "FreeModbus/include/mbproto.h"
 919              		.file 7 "FreeModbus/include/mb.h"
 920              		.file 8 "FreeModbus/include/mbframe.h"
 921              		.file 9 "FreeModbus/port/portcritical.h"
 922              		.file 10 "FreeModbus/rtu/mbrtu.h"
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 26


DEFINED SYMBOLS
                            *ABS*:00000000 mb.c
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:18     .text.eMBInit:00000000 $t
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:24     .text.eMBInit:00000000 eMBInit
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:152    .text.eMBInit:00000078 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:174    .text.eMBRegisterCB:00000000 $t
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:180    .text.eMBRegisterCB:00000000 eMBRegisterCB
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:323    .text.eMBRegisterCB:00000074 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:328    .text.eMBClose:00000000 $t
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:334    .text.eMBClose:00000000 eMBClose
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:381    .text.eMBClose:00000020 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:387    .text.eMBEnable:00000000 $t
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:393    .text.eMBEnable:00000000 eMBEnable
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:436    .text.eMBEnable:0000001c $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:442    .text.eMBDisable:00000000 $t
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:448    .text.eMBDisable:00000000 eMBDisable
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:499    .text.eMBDisable:00000024 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:505    .text.eMBPoll:00000000 $t
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:511    .text.eMBPoll:00000000 eMBPoll
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:739    .text.eMBPoll:000000e0 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:821    .bss.pxMBFrameCBTransmitFSMCur:00000000 pxMBFrameCBTransmitFSMCur
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:815    .bss.pxMBFrameCBReceiveFSMCur:00000000 pxMBFrameCBReceiveFSMCur
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:835    .bss.pxMBPortCBTimerExpired:00000000 pxMBPortCBTimerExpired
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:828    .bss.pxMBFrameCBTransmitterEmpty:00000000 pxMBFrameCBTransmitterEmpty
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:809    .bss.pxMBFrameCBByteReceived:00000000 pxMBFrameCBByteReceived
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:761    .bss.eException.0:00000000 eException.0
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:762    .bss.eException.0:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:767    .bss.eMBCurrentMode:00000000 eMBCurrentMode
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:768    .bss.eMBCurrentMode:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:770    .bss.peMBFrameReceiveCur:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:774    .bss.peMBFrameReceiveCur:00000000 peMBFrameReceiveCur
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:777    .bss.peMBFrameSendCur:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:781    .bss.peMBFrameSendCur:00000000 peMBFrameSendCur
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:784    .bss.pvMBFrameCloseCur:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:788    .bss.pvMBFrameCloseCur:00000000 pvMBFrameCloseCur
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:791    .bss.pvMBFrameStartCur:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:795    .bss.pvMBFrameStartCur:00000000 pvMBFrameStartCur
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:798    .bss.pvMBFrameStopCur:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:802    .bss.pvMBFrameStopCur:00000000 pvMBFrameStopCur
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:805    .bss.pxMBFrameCBByteReceived:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:812    .bss.pxMBFrameCBReceiveFSMCur:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:818    .bss.pxMBFrameCBTransmitFSMCur:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:824    .bss.pxMBFrameCBTransmitterEmpty:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:831    .bss.pxMBPortCBTimerExpired:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:841    .bss.ucFunctionCode.1:00000000 ucFunctionCode.1
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:842    .bss.ucFunctionCode.1:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:847    .bss.ucMBAddress:00000000 ucMBAddress
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:848    .bss.ucMBAddress:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:850    .bss.ucMBFrame.3:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:854    .bss.ucMBFrame.3:00000000 ucMBFrame.3
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:860    .bss.ucRcvAddress.4:00000000 ucRcvAddress.4
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:861    .bss.ucRcvAddress.4:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:863    .bss.usLength.2:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:867    .bss.usLength.2:00000000 usLength.2
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:873    .data.eMBState:00000000 eMBState
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:876    .data.xFuncHandlers:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s:880    .data.xFuncHandlers:00000000 xFuncHandlers
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\ccQNzHCa.s 			page 27



UNDEFINED SYMBOLS
eMBRTUInit
xMBPortEventInit
eMBRTUStart
eMBRTUStop
eMBRTUSend
eMBRTUReceive
xMBRTUReceiveFSM
xMBRTUTransmitFSM
xMBRTUTimerT35Expired
__critical_enter
__critical_exit
xMBPortEventGet
xMBPortEventPost
eMBFuncReportSlaveID
eMBFuncReadInputRegister
eMBFuncReadHoldingRegister
eMBFuncWriteMultipleHoldingRegister
eMBFuncWriteHoldingRegister
eMBFuncReadWriteMultipleHoldingRegister
eMBFuncReadCoils
eMBFuncWriteCoil
eMBFuncWriteMultipleCoils
eMBFuncReadDiscreteInputs
