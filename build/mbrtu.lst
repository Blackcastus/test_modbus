ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"mbrtu.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.eMBRTUInit,"ax",%progbits
  18              		.align	1
  19              		.global	eMBRTUInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	eMBRTUInit:
  25              	.LVL0:
  26              	.LFB65:
  27              		.file 1 "FreeModbus/rtu/mbrtu.c"
   1:FreeModbus/rtu/mbrtu.c **** /* 
   2:FreeModbus/rtu/mbrtu.c ****  * FreeModbus Libary: A portable Modbus implementation for Modbus ASCII/RTU.
   3:FreeModbus/rtu/mbrtu.c ****  * Copyright (c) 2006-2018 Christian Walter <cwalter@embedded-solutions.at>
   4:FreeModbus/rtu/mbrtu.c ****  * All rights reserved.
   5:FreeModbus/rtu/mbrtu.c ****  *
   6:FreeModbus/rtu/mbrtu.c ****  * Redistribution and use in source and binary forms, with or without
   7:FreeModbus/rtu/mbrtu.c ****  * modification, are permitted provided that the following conditions
   8:FreeModbus/rtu/mbrtu.c ****  * are met:
   9:FreeModbus/rtu/mbrtu.c ****  * 1. Redistributions of source code must retain the above copyright
  10:FreeModbus/rtu/mbrtu.c ****  *    notice, this list of conditions and the following disclaimer.
  11:FreeModbus/rtu/mbrtu.c ****  * 2. Redistributions in binary form must reproduce the above copyright
  12:FreeModbus/rtu/mbrtu.c ****  *    notice, this list of conditions and the following disclaimer in the
  13:FreeModbus/rtu/mbrtu.c ****  *    documentation and/or other materials provided with the distribution.
  14:FreeModbus/rtu/mbrtu.c ****  * 3. The name of the author may not be used to endorse or promote products
  15:FreeModbus/rtu/mbrtu.c ****  *    derived from this software without specific prior written permission.
  16:FreeModbus/rtu/mbrtu.c ****  *
  17:FreeModbus/rtu/mbrtu.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
  18:FreeModbus/rtu/mbrtu.c ****  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  19:FreeModbus/rtu/mbrtu.c ****  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  20:FreeModbus/rtu/mbrtu.c ****  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
  21:FreeModbus/rtu/mbrtu.c ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  22:FreeModbus/rtu/mbrtu.c ****  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  23:FreeModbus/rtu/mbrtu.c ****  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  24:FreeModbus/rtu/mbrtu.c ****  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  25:FreeModbus/rtu/mbrtu.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  26:FreeModbus/rtu/mbrtu.c ****  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27:FreeModbus/rtu/mbrtu.c ****  *
  28:FreeModbus/rtu/mbrtu.c ****  * File: $Id: mbrtu.c,v 1.18 2007/09/12 10:15:56 wolti Exp $
  29:FreeModbus/rtu/mbrtu.c ****  */
  30:FreeModbus/rtu/mbrtu.c **** 
  31:FreeModbus/rtu/mbrtu.c **** /* ----------------------- System includes ----------------------------------*/
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 2


  32:FreeModbus/rtu/mbrtu.c **** #include "stdlib.h"
  33:FreeModbus/rtu/mbrtu.c **** #include "string.h"
  34:FreeModbus/rtu/mbrtu.c **** 
  35:FreeModbus/rtu/mbrtu.c **** /* ----------------------- Platform includes --------------------------------*/
  36:FreeModbus/rtu/mbrtu.c **** #include "port.h"
  37:FreeModbus/rtu/mbrtu.c **** 
  38:FreeModbus/rtu/mbrtu.c **** /* ----------------------- Modbus includes ----------------------------------*/
  39:FreeModbus/rtu/mbrtu.c **** #include "mb.h"
  40:FreeModbus/rtu/mbrtu.c **** #include "mbrtu.h"
  41:FreeModbus/rtu/mbrtu.c **** #include "mbframe.h"
  42:FreeModbus/rtu/mbrtu.c **** 
  43:FreeModbus/rtu/mbrtu.c **** #include "mbcrc.h"
  44:FreeModbus/rtu/mbrtu.c **** #include "mbport.h"
  45:FreeModbus/rtu/mbrtu.c **** 
  46:FreeModbus/rtu/mbrtu.c **** /* ----------------------- Defines ------------------------------------------*/
  47:FreeModbus/rtu/mbrtu.c **** #define MB_SER_PDU_SIZE_MIN     4       /*!< Minimum size of a Modbus RTU frame. */
  48:FreeModbus/rtu/mbrtu.c **** #define MB_SER_PDU_SIZE_MAX     256     /*!< Maximum size of a Modbus RTU frame. */
  49:FreeModbus/rtu/mbrtu.c **** #define MB_SER_PDU_SIZE_CRC     2       /*!< Size of CRC field in PDU. */
  50:FreeModbus/rtu/mbrtu.c **** #define MB_SER_PDU_ADDR_OFF     0       /*!< Offset of slave address in Ser-PDU. */
  51:FreeModbus/rtu/mbrtu.c **** #define MB_SER_PDU_PDU_OFF      1       /*!< Offset of Modbus-PDU in Ser-PDU. */
  52:FreeModbus/rtu/mbrtu.c **** 
  53:FreeModbus/rtu/mbrtu.c **** /* ----------------------- Type definitions ---------------------------------*/
  54:FreeModbus/rtu/mbrtu.c **** typedef enum
  55:FreeModbus/rtu/mbrtu.c **** {
  56:FreeModbus/rtu/mbrtu.c ****     STATE_RX_INIT,              /*!< Receiver is in initial state. */
  57:FreeModbus/rtu/mbrtu.c ****     STATE_RX_IDLE,              /*!< Receiver is in idle state. */
  58:FreeModbus/rtu/mbrtu.c ****     STATE_RX_RCV,               /*!< Frame is beeing received. */
  59:FreeModbus/rtu/mbrtu.c ****     STATE_RX_ERROR              /*!< If the frame is invalid. */
  60:FreeModbus/rtu/mbrtu.c **** } eMBRcvState;
  61:FreeModbus/rtu/mbrtu.c **** 
  62:FreeModbus/rtu/mbrtu.c **** typedef enum
  63:FreeModbus/rtu/mbrtu.c **** {
  64:FreeModbus/rtu/mbrtu.c ****     STATE_TX_IDLE,              /*!< Transmitter is in idle state. */
  65:FreeModbus/rtu/mbrtu.c ****     STATE_TX_XMIT               /*!< Transmitter is in transfer state. */
  66:FreeModbus/rtu/mbrtu.c **** } eMBSndState;
  67:FreeModbus/rtu/mbrtu.c **** 
  68:FreeModbus/rtu/mbrtu.c **** /* ----------------------- Static variables ---------------------------------*/
  69:FreeModbus/rtu/mbrtu.c **** static volatile eMBSndState eSndState;
  70:FreeModbus/rtu/mbrtu.c **** static volatile eMBRcvState eRcvState;
  71:FreeModbus/rtu/mbrtu.c **** 
  72:FreeModbus/rtu/mbrtu.c **** volatile UCHAR  ucRTUBuf[MB_SER_PDU_SIZE_MAX];
  73:FreeModbus/rtu/mbrtu.c **** 
  74:FreeModbus/rtu/mbrtu.c **** static volatile UCHAR *pucSndBufferCur;
  75:FreeModbus/rtu/mbrtu.c **** static volatile USHORT usSndBufferCount;
  76:FreeModbus/rtu/mbrtu.c **** 
  77:FreeModbus/rtu/mbrtu.c **** static volatile USHORT usRcvBufferPos;
  78:FreeModbus/rtu/mbrtu.c **** 
  79:FreeModbus/rtu/mbrtu.c **** /* ----------------------- Start implementation -----------------------------*/
  80:FreeModbus/rtu/mbrtu.c **** eMBErrorCode
  81:FreeModbus/rtu/mbrtu.c **** eMBRTUInit( UCHAR ucSlaveAddress, void *dHUART, ULONG ulBaudRate, void *dHTIM )
  82:FreeModbus/rtu/mbrtu.c **** {
  28              		.loc 1 82 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 82 1 is_stmt 0 view .LVU1
  33 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 3


  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40 0002 0E46     		mov	r6, r1
  41 0004 1446     		mov	r4, r2
  42 0006 1D46     		mov	r5, r3
  83:FreeModbus/rtu/mbrtu.c ****     eMBErrorCode    eStatus = MB_ENOERR;
  43              		.loc 1 83 5 is_stmt 1 view .LVU2
  44              	.LVL1:
  84:FreeModbus/rtu/mbrtu.c ****     ULONG           usTimerT35_50us;
  45              		.loc 1 84 5 view .LVU3
  85:FreeModbus/rtu/mbrtu.c **** 
  86:FreeModbus/rtu/mbrtu.c ****     ( void )ucSlaveAddress;
  46              		.loc 1 86 5 view .LVU4
  87:FreeModbus/rtu/mbrtu.c ****     ENTER_CRITICAL_SECTION(  );
  47              		.loc 1 87 5 view .LVU5
  48 0008 FFF7FEFF 		bl	__critical_enter
  49              	.LVL2:
  88:FreeModbus/rtu/mbrtu.c **** 
  89:FreeModbus/rtu/mbrtu.c ****     /* Modbus RTU uses 8 Databits. */
  90:FreeModbus/rtu/mbrtu.c ****     if( xMBPortSerialInit( dHUART, ulBaudRate, dHTIM ) != TRUE )
  50              		.loc 1 90 5 view .LVU6
  51              		.loc 1 90 9 is_stmt 0 view .LVU7
  52 000c 2A46     		mov	r2, r5
  53 000e 2146     		mov	r1, r4
  54 0010 3046     		mov	r0, r6
  55 0012 FFF7FEFF 		bl	xMBPortSerialInit
  56              	.LVL3:
  57              		.loc 1 90 7 view .LVU8
  58 0016 0128     		cmp	r0, #1
  59 0018 04D0     		beq	.L8
  91:FreeModbus/rtu/mbrtu.c ****     {
  92:FreeModbus/rtu/mbrtu.c ****         eStatus = MB_EPORTERR;
  60              		.loc 1 92 17 view .LVU9
  61 001a 0324     		movs	r4, #3
  62              	.LVL4:
  63              	.L2:
  93:FreeModbus/rtu/mbrtu.c ****     }
  94:FreeModbus/rtu/mbrtu.c ****     else
  95:FreeModbus/rtu/mbrtu.c ****     {
  96:FreeModbus/rtu/mbrtu.c ****         /* If baudrate > 19200 then we should use the fixed timer values
  97:FreeModbus/rtu/mbrtu.c ****          * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
  98:FreeModbus/rtu/mbrtu.c ****          */
  99:FreeModbus/rtu/mbrtu.c ****         if( ulBaudRate > 19200 )
 100:FreeModbus/rtu/mbrtu.c ****         {
 101:FreeModbus/rtu/mbrtu.c ****             usTimerT35_50us = 35;       /* 1800us. */
 102:FreeModbus/rtu/mbrtu.c ****         }
 103:FreeModbus/rtu/mbrtu.c ****         else
 104:FreeModbus/rtu/mbrtu.c ****         {
 105:FreeModbus/rtu/mbrtu.c ****             /* The timer reload value for a character is given by:
 106:FreeModbus/rtu/mbrtu.c ****              *
 107:FreeModbus/rtu/mbrtu.c ****              * ChTimeValue = Ticks_per_1s / ( Baudrate / 11 )
 108:FreeModbus/rtu/mbrtu.c ****              *             = 11 * Ticks_per_1s / Baudrate
 109:FreeModbus/rtu/mbrtu.c ****              *             = 220000 / Baudrate
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 4


 110:FreeModbus/rtu/mbrtu.c ****              * The reload for t3.5 is 1.5 times this value and similary
 111:FreeModbus/rtu/mbrtu.c ****              * for t3.5.
 112:FreeModbus/rtu/mbrtu.c ****              */
 113:FreeModbus/rtu/mbrtu.c ****             usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 114:FreeModbus/rtu/mbrtu.c ****         }
 115:FreeModbus/rtu/mbrtu.c ****         if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us, dHTIM ) != TRUE )
 116:FreeModbus/rtu/mbrtu.c ****         {
 117:FreeModbus/rtu/mbrtu.c ****             eStatus = MB_EPORTERR;
 118:FreeModbus/rtu/mbrtu.c ****         }
 119:FreeModbus/rtu/mbrtu.c ****     }
 120:FreeModbus/rtu/mbrtu.c ****     EXIT_CRITICAL_SECTION(  );
  64              		.loc 1 120 5 is_stmt 1 view .LVU10
  65 001c FFF7FEFF 		bl	__critical_exit
  66              	.LVL5:
 121:FreeModbus/rtu/mbrtu.c **** 
 122:FreeModbus/rtu/mbrtu.c ****     return eStatus;
  67              		.loc 1 122 5 view .LVU11
 123:FreeModbus/rtu/mbrtu.c **** }
  68              		.loc 1 123 1 is_stmt 0 view .LVU12
  69 0020 2046     		mov	r0, r4
  70 0022 70BD     		pop	{r4, r5, r6, pc}
  71              	.LVL6:
  72              	.L8:
  99:FreeModbus/rtu/mbrtu.c ****         {
  73              		.loc 1 99 9 is_stmt 1 view .LVU13
  99:FreeModbus/rtu/mbrtu.c ****         {
  74              		.loc 1 99 11 is_stmt 0 view .LVU14
  75 0024 B4F5964F 		cmp	r4, #19200
  76 0028 0BD8     		bhi	.L5
 113:FreeModbus/rtu/mbrtu.c ****         }
  77              		.loc 1 113 13 is_stmt 1 view .LVU15
 113:FreeModbus/rtu/mbrtu.c ****         }
  78              		.loc 1 113 58 is_stmt 0 view .LVU16
  79 002a 6400     		lsls	r4, r4, #1
  80              	.LVL7:
 113:FreeModbus/rtu/mbrtu.c ****         }
  81              		.loc 1 113 29 view .LVU17
  82 002c 0748     		ldr	r0, .L10
  83 002e B0FBF4F0 		udiv	r0, r0, r4
  84              	.LVL8:
  85              	.L3:
 115:FreeModbus/rtu/mbrtu.c ****         {
  86              		.loc 1 115 9 is_stmt 1 view .LVU18
 115:FreeModbus/rtu/mbrtu.c ****         {
  87              		.loc 1 115 13 is_stmt 0 view .LVU19
  88 0032 2946     		mov	r1, r5
  89 0034 80B2     		uxth	r0, r0
  90              	.LVL9:
 115:FreeModbus/rtu/mbrtu.c ****         {
  91              		.loc 1 115 13 view .LVU20
  92 0036 FFF7FEFF 		bl	xMBPortTimersInit
  93              	.LVL10:
 115:FreeModbus/rtu/mbrtu.c ****         {
  94              		.loc 1 115 11 view .LVU21
  95 003a 0128     		cmp	r0, #1
  96 003c 03D0     		beq	.L9
 117:FreeModbus/rtu/mbrtu.c ****         }
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 5


  97              		.loc 1 117 21 view .LVU22
  98 003e 0324     		movs	r4, #3
  99 0040 ECE7     		b	.L2
 100              	.LVL11:
 101              	.L5:
 101:FreeModbus/rtu/mbrtu.c ****         }
 102              		.loc 1 101 29 view .LVU23
 103 0042 2320     		movs	r0, #35
 104 0044 F5E7     		b	.L3
 105              	.LVL12:
 106              	.L9:
  83:FreeModbus/rtu/mbrtu.c ****     ULONG           usTimerT35_50us;
 107              		.loc 1 83 21 view .LVU24
 108 0046 0024     		movs	r4, #0
 109 0048 E8E7     		b	.L2
 110              	.L11:
 111 004a 00BF     		.align	2
 112              	.L10:
 113 004c A07F1700 		.word	1540000
 114              		.cfi_endproc
 115              	.LFE65:
 117              		.section	.text.eMBRTUStart,"ax",%progbits
 118              		.align	1
 119              		.global	eMBRTUStart
 120              		.syntax unified
 121              		.thumb
 122              		.thumb_func
 124              	eMBRTUStart:
 125              	.LFB66:
 124:FreeModbus/rtu/mbrtu.c **** 
 125:FreeModbus/rtu/mbrtu.c **** void
 126:FreeModbus/rtu/mbrtu.c **** eMBRTUStart( void )
 127:FreeModbus/rtu/mbrtu.c **** {
 126              		.loc 1 127 1 is_stmt 1 view -0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130 0000 08B5     		push	{r3, lr}
 131              	.LCFI1:
 132              		.cfi_def_cfa_offset 8
 133              		.cfi_offset 3, -8
 134              		.cfi_offset 14, -4
 128:FreeModbus/rtu/mbrtu.c ****     ENTER_CRITICAL_SECTION(  );
 135              		.loc 1 128 5 view .LVU26
 136 0002 FFF7FEFF 		bl	__critical_enter
 137              	.LVL13:
 129:FreeModbus/rtu/mbrtu.c ****     /* Initially the receiver is in the state STATE_RX_INIT. we start
 130:FreeModbus/rtu/mbrtu.c ****      * the timer and if no character is received within t3.5 we change
 131:FreeModbus/rtu/mbrtu.c ****      * to STATE_RX_IDLE. This makes sure that we delay startup of the
 132:FreeModbus/rtu/mbrtu.c ****      * modbus protocol stack until the bus is free.
 133:FreeModbus/rtu/mbrtu.c ****      */
 134:FreeModbus/rtu/mbrtu.c ****     eRcvState = STATE_RX_INIT;
 138              		.loc 1 134 5 view .LVU27
 139              		.loc 1 134 15 is_stmt 0 view .LVU28
 140 0006 0021     		movs	r1, #0
 141 0008 044B     		ldr	r3, .L14
 142 000a 1970     		strb	r1, [r3]
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 6


 135:FreeModbus/rtu/mbrtu.c ****     vMBPortSerialEnable( TRUE, FALSE );
 143              		.loc 1 135 5 is_stmt 1 view .LVU29
 144 000c 0120     		movs	r0, #1
 145 000e FFF7FEFF 		bl	vMBPortSerialEnable
 146              	.LVL14:
 136:FreeModbus/rtu/mbrtu.c ****     vMBPortTimersEnable(  );
 147              		.loc 1 136 5 view .LVU30
 148 0012 FFF7FEFF 		bl	vMBPortTimersEnable
 149              	.LVL15:
 137:FreeModbus/rtu/mbrtu.c **** 
 138:FreeModbus/rtu/mbrtu.c ****     EXIT_CRITICAL_SECTION(  );
 150              		.loc 1 138 5 view .LVU31
 151 0016 FFF7FEFF 		bl	__critical_exit
 152              	.LVL16:
 139:FreeModbus/rtu/mbrtu.c **** }
 153              		.loc 1 139 1 is_stmt 0 view .LVU32
 154 001a 08BD     		pop	{r3, pc}
 155              	.L15:
 156              		.align	2
 157              	.L14:
 158 001c 00000000 		.word	.LANCHOR0
 159              		.cfi_endproc
 160              	.LFE66:
 162              		.section	.text.eMBRTUStop,"ax",%progbits
 163              		.align	1
 164              		.global	eMBRTUStop
 165              		.syntax unified
 166              		.thumb
 167              		.thumb_func
 169              	eMBRTUStop:
 170              	.LFB67:
 140:FreeModbus/rtu/mbrtu.c **** 
 141:FreeModbus/rtu/mbrtu.c **** void
 142:FreeModbus/rtu/mbrtu.c **** eMBRTUStop( void )
 143:FreeModbus/rtu/mbrtu.c **** {
 171              		.loc 1 143 1 is_stmt 1 view -0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175 0000 08B5     		push	{r3, lr}
 176              	.LCFI2:
 177              		.cfi_def_cfa_offset 8
 178              		.cfi_offset 3, -8
 179              		.cfi_offset 14, -4
 144:FreeModbus/rtu/mbrtu.c ****     ENTER_CRITICAL_SECTION(  );
 180              		.loc 1 144 5 view .LVU34
 181 0002 FFF7FEFF 		bl	__critical_enter
 182              	.LVL17:
 145:FreeModbus/rtu/mbrtu.c ****     vMBPortSerialEnable( FALSE, FALSE );
 183              		.loc 1 145 5 view .LVU35
 184 0006 0021     		movs	r1, #0
 185 0008 0846     		mov	r0, r1
 186 000a FFF7FEFF 		bl	vMBPortSerialEnable
 187              	.LVL18:
 146:FreeModbus/rtu/mbrtu.c ****     vMBPortTimersDisable(  );
 188              		.loc 1 146 5 view .LVU36
 189 000e FFF7FEFF 		bl	vMBPortTimersDisable
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 7


 190              	.LVL19:
 147:FreeModbus/rtu/mbrtu.c ****     EXIT_CRITICAL_SECTION(  );
 191              		.loc 1 147 5 view .LVU37
 192 0012 FFF7FEFF 		bl	__critical_exit
 193              	.LVL20:
 148:FreeModbus/rtu/mbrtu.c **** }
 194              		.loc 1 148 1 is_stmt 0 view .LVU38
 195 0016 08BD     		pop	{r3, pc}
 196              		.cfi_endproc
 197              	.LFE67:
 199              		.section	.text.eMBRTUReceive,"ax",%progbits
 200              		.align	1
 201              		.global	eMBRTUReceive
 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 206              	eMBRTUReceive:
 207              	.LVL21:
 208              	.LFB68:
 149:FreeModbus/rtu/mbrtu.c **** 
 150:FreeModbus/rtu/mbrtu.c **** eMBErrorCode
 151:FreeModbus/rtu/mbrtu.c **** eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
 152:FreeModbus/rtu/mbrtu.c **** {
 209              		.loc 1 152 1 is_stmt 1 view -0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              		.loc 1 152 1 is_stmt 0 view .LVU40
 214 0000 70B5     		push	{r4, r5, r6, lr}
 215              	.LCFI3:
 216              		.cfi_def_cfa_offset 16
 217              		.cfi_offset 4, -16
 218              		.cfi_offset 5, -12
 219              		.cfi_offset 6, -8
 220              		.cfi_offset 14, -4
 221 0002 0646     		mov	r6, r0
 222 0004 0D46     		mov	r5, r1
 223 0006 1446     		mov	r4, r2
 153:FreeModbus/rtu/mbrtu.c ****     eMBErrorCode    eStatus = MB_ENOERR;
 224              		.loc 1 153 5 is_stmt 1 view .LVU41
 225              	.LVL22:
 154:FreeModbus/rtu/mbrtu.c **** 
 155:FreeModbus/rtu/mbrtu.c ****     ENTER_CRITICAL_SECTION(  );
 226              		.loc 1 155 5 view .LVU42
 227 0008 FFF7FEFF 		bl	__critical_enter
 228              	.LVL23:
 156:FreeModbus/rtu/mbrtu.c ****     assert_param( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 229              		.loc 1 156 5 view .LVU43
 157:FreeModbus/rtu/mbrtu.c **** 
 158:FreeModbus/rtu/mbrtu.c ****     /* Length and CRC check */
 159:FreeModbus/rtu/mbrtu.c ****     if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 230              		.loc 1 159 5 view .LVU44
 231              		.loc 1 159 26 is_stmt 0 view .LVU45
 232 000c 0F4B     		ldr	r3, .L24
 233 000e 1B88     		ldrh	r3, [r3]
 234 0010 9BB2     		uxth	r3, r3
 235              		.loc 1 159 7 view .LVU46
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 8


 236 0012 032B     		cmp	r3, #3
 237 0014 04D8     		bhi	.L23
 160:FreeModbus/rtu/mbrtu.c ****         && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 161:FreeModbus/rtu/mbrtu.c ****     {
 162:FreeModbus/rtu/mbrtu.c ****         /* Save the address field. All frames are passed to the upper layed
 163:FreeModbus/rtu/mbrtu.c ****          * and the decision if a frame is used is done there.
 164:FreeModbus/rtu/mbrtu.c ****          */
 165:FreeModbus/rtu/mbrtu.c ****         *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 166:FreeModbus/rtu/mbrtu.c **** 
 167:FreeModbus/rtu/mbrtu.c ****         /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
 168:FreeModbus/rtu/mbrtu.c ****          * size of address field and CRC checksum.
 169:FreeModbus/rtu/mbrtu.c ****          */
 170:FreeModbus/rtu/mbrtu.c ****         *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 171:FreeModbus/rtu/mbrtu.c **** 
 172:FreeModbus/rtu/mbrtu.c ****         /* Return the start of the Modbus PDU to the caller. */
 173:FreeModbus/rtu/mbrtu.c ****         *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 174:FreeModbus/rtu/mbrtu.c ****     }
 175:FreeModbus/rtu/mbrtu.c ****     else
 176:FreeModbus/rtu/mbrtu.c ****     {
 177:FreeModbus/rtu/mbrtu.c ****         eStatus = MB_EIO;
 238              		.loc 1 177 17 view .LVU47
 239 0016 0524     		movs	r4, #5
 240              	.LVL24:
 241              	.L19:
 178:FreeModbus/rtu/mbrtu.c ****     }
 179:FreeModbus/rtu/mbrtu.c **** 
 180:FreeModbus/rtu/mbrtu.c ****     EXIT_CRITICAL_SECTION(  );
 242              		.loc 1 180 5 is_stmt 1 view .LVU48
 243 0018 FFF7FEFF 		bl	__critical_exit
 244              	.LVL25:
 181:FreeModbus/rtu/mbrtu.c ****     return eStatus;
 245              		.loc 1 181 5 view .LVU49
 182:FreeModbus/rtu/mbrtu.c **** }
 246              		.loc 1 182 1 is_stmt 0 view .LVU50
 247 001c 2046     		mov	r0, r4
 248 001e 70BD     		pop	{r4, r5, r6, pc}
 249              	.LVL26:
 250              	.L23:
 160:FreeModbus/rtu/mbrtu.c ****     {
 251              		.loc 1 160 14 view .LVU51
 252 0020 0A4B     		ldr	r3, .L24
 253 0022 1988     		ldrh	r1, [r3]
 254 0024 89B2     		uxth	r1, r1
 255 0026 0A48     		ldr	r0, .L24+4
 256 0028 FFF7FEFF 		bl	usMBCRC16
 257              	.LVL27:
 160:FreeModbus/rtu/mbrtu.c ****     {
 258              		.loc 1 160 9 view .LVU52
 259 002c 58B9     		cbnz	r0, .L21
 165:FreeModbus/rtu/mbrtu.c **** 
 260              		.loc 1 165 9 is_stmt 1 view .LVU53
 165:FreeModbus/rtu/mbrtu.c **** 
 261              		.loc 1 165 34 is_stmt 0 view .LVU54
 262 002e 084A     		ldr	r2, .L24+4
 263 0030 12F8013B 		ldrb	r3, [r2], #1	@ zero_extendqisi2
 165:FreeModbus/rtu/mbrtu.c **** 
 264              		.loc 1 165 24 view .LVU55
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 9


 265 0034 3370     		strb	r3, [r6]
 170:FreeModbus/rtu/mbrtu.c **** 
 266              		.loc 1 170 9 is_stmt 1 view .LVU56
 170:FreeModbus/rtu/mbrtu.c **** 
 267              		.loc 1 170 22 is_stmt 0 view .LVU57
 268 0036 054B     		ldr	r3, .L24
 269 0038 1B88     		ldrh	r3, [r3]
 270 003a 9BB2     		uxth	r3, r3
 271 003c 033B     		subs	r3, r3, #3
 170:FreeModbus/rtu/mbrtu.c **** 
 272              		.loc 1 170 20 view .LVU58
 273 003e 2380     		strh	r3, [r4]	@ movhi
 173:FreeModbus/rtu/mbrtu.c ****     }
 274              		.loc 1 173 9 is_stmt 1 view .LVU59
 173:FreeModbus/rtu/mbrtu.c ****     }
 275              		.loc 1 173 19 is_stmt 0 view .LVU60
 276 0040 2A60     		str	r2, [r5]
 153:FreeModbus/rtu/mbrtu.c **** 
 277              		.loc 1 153 21 view .LVU61
 278 0042 0024     		movs	r4, #0
 279              	.LVL28:
 173:FreeModbus/rtu/mbrtu.c ****     }
 280              		.loc 1 173 19 view .LVU62
 281 0044 E8E7     		b	.L19
 282              	.LVL29:
 283              	.L21:
 177:FreeModbus/rtu/mbrtu.c ****     }
 284              		.loc 1 177 17 view .LVU63
 285 0046 0524     		movs	r4, #5
 286              	.LVL30:
 177:FreeModbus/rtu/mbrtu.c ****     }
 287              		.loc 1 177 17 view .LVU64
 288 0048 E6E7     		b	.L19
 289              	.L25:
 290 004a 00BF     		.align	2
 291              	.L24:
 292 004c 00000000 		.word	.LANCHOR1
 293 0050 00000000 		.word	.LANCHOR2
 294              		.cfi_endproc
 295              	.LFE68:
 297              		.section	.text.eMBRTUSend,"ax",%progbits
 298              		.align	1
 299              		.global	eMBRTUSend
 300              		.syntax unified
 301              		.thumb
 302              		.thumb_func
 304              	eMBRTUSend:
 305              	.LVL31:
 306              	.LFB69:
 183:FreeModbus/rtu/mbrtu.c **** 
 184:FreeModbus/rtu/mbrtu.c **** eMBErrorCode
 185:FreeModbus/rtu/mbrtu.c **** eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
 186:FreeModbus/rtu/mbrtu.c **** {
 307              		.loc 1 186 1 is_stmt 1 view -0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 10


 311              		.loc 1 186 1 is_stmt 0 view .LVU66
 312 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 313              	.LCFI4:
 314              		.cfi_def_cfa_offset 24
 315              		.cfi_offset 4, -24
 316              		.cfi_offset 5, -20
 317              		.cfi_offset 6, -16
 318              		.cfi_offset 7, -12
 319              		.cfi_offset 8, -8
 320              		.cfi_offset 14, -4
 321 0004 0646     		mov	r6, r0
 322 0006 0C46     		mov	r4, r1
 323 0008 1546     		mov	r5, r2
 187:FreeModbus/rtu/mbrtu.c ****     eMBErrorCode    eStatus = MB_ENOERR;
 324              		.loc 1 187 5 is_stmt 1 view .LVU67
 325              	.LVL32:
 188:FreeModbus/rtu/mbrtu.c ****     USHORT          usCRC16;
 326              		.loc 1 188 5 view .LVU68
 189:FreeModbus/rtu/mbrtu.c **** 
 190:FreeModbus/rtu/mbrtu.c ****     ENTER_CRITICAL_SECTION(  );
 327              		.loc 1 190 5 view .LVU69
 328 000a FFF7FEFF 		bl	__critical_enter
 329              	.LVL33:
 191:FreeModbus/rtu/mbrtu.c **** 
 192:FreeModbus/rtu/mbrtu.c ****     /* Check if the receiver is still in idle state. If not we where to
 193:FreeModbus/rtu/mbrtu.c ****      * slow with processing the received frame and the master sent another
 194:FreeModbus/rtu/mbrtu.c ****      * frame on the network. We have to abort sending the frame.
 195:FreeModbus/rtu/mbrtu.c ****      */
 196:FreeModbus/rtu/mbrtu.c ****     if( eRcvState == STATE_RX_IDLE )
 330              		.loc 1 196 5 view .LVU70
 331              		.loc 1 196 19 is_stmt 0 view .LVU71
 332 000e 1C4B     		ldr	r3, .L31
 333 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 334 0012 DBB2     		uxtb	r3, r3
 335              		.loc 1 196 7 view .LVU72
 336 0014 012B     		cmp	r3, #1
 337 0016 05D0     		beq	.L30
 197:FreeModbus/rtu/mbrtu.c ****     {
 198:FreeModbus/rtu/mbrtu.c ****         /* First byte before the Modbus-PDU is the slave address. */
 199:FreeModbus/rtu/mbrtu.c ****         pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 200:FreeModbus/rtu/mbrtu.c ****         usSndBufferCount = 1;
 201:FreeModbus/rtu/mbrtu.c **** 
 202:FreeModbus/rtu/mbrtu.c ****         /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
 203:FreeModbus/rtu/mbrtu.c ****         pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 204:FreeModbus/rtu/mbrtu.c ****         usSndBufferCount += usLength;
 205:FreeModbus/rtu/mbrtu.c **** 
 206:FreeModbus/rtu/mbrtu.c ****         /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
 207:FreeModbus/rtu/mbrtu.c ****         usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 208:FreeModbus/rtu/mbrtu.c ****         ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 209:FreeModbus/rtu/mbrtu.c ****         ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 210:FreeModbus/rtu/mbrtu.c **** 
 211:FreeModbus/rtu/mbrtu.c ****         /* Activate the transmitter. */
 212:FreeModbus/rtu/mbrtu.c ****         eSndState = STATE_TX_XMIT;
 213:FreeModbus/rtu/mbrtu.c ****         vMBPortSerialEnable( FALSE, TRUE );
 214:FreeModbus/rtu/mbrtu.c ****     }
 215:FreeModbus/rtu/mbrtu.c ****     else
 216:FreeModbus/rtu/mbrtu.c ****     {
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 11


 217:FreeModbus/rtu/mbrtu.c ****         eStatus = MB_EIO;
 338              		.loc 1 217 17 view .LVU73
 339 0018 0524     		movs	r4, #5
 340              	.LVL34:
 341              	.L27:
 218:FreeModbus/rtu/mbrtu.c ****     }
 219:FreeModbus/rtu/mbrtu.c ****     EXIT_CRITICAL_SECTION(  );
 342              		.loc 1 219 5 is_stmt 1 view .LVU74
 343 001a FFF7FEFF 		bl	__critical_exit
 344              	.LVL35:
 220:FreeModbus/rtu/mbrtu.c ****     return eStatus;
 345              		.loc 1 220 5 view .LVU75
 221:FreeModbus/rtu/mbrtu.c **** }
 346              		.loc 1 221 1 is_stmt 0 view .LVU76
 347 001e 2046     		mov	r0, r4
 348 0020 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 349              	.LVL36:
 350              	.L30:
 199:FreeModbus/rtu/mbrtu.c ****         usSndBufferCount = 1;
 351              		.loc 1 199 9 is_stmt 1 view .LVU77
 199:FreeModbus/rtu/mbrtu.c ****         usSndBufferCount = 1;
 352              		.loc 1 199 48 is_stmt 0 view .LVU78
 353 0024 601E     		subs	r0, r4, #1
 199:FreeModbus/rtu/mbrtu.c ****         usSndBufferCount = 1;
 354              		.loc 1 199 25 view .LVU79
 355 0026 174B     		ldr	r3, .L31+4
 356 0028 1860     		str	r0, [r3]
 200:FreeModbus/rtu/mbrtu.c **** 
 357              		.loc 1 200 9 is_stmt 1 view .LVU80
 200:FreeModbus/rtu/mbrtu.c **** 
 358              		.loc 1 200 26 is_stmt 0 view .LVU81
 359 002a 174F     		ldr	r7, .L31+8
 360 002c 4FF00108 		mov	r8, #1
 361 0030 A7F80080 		strh	r8, [r7]	@ movhi
 203:FreeModbus/rtu/mbrtu.c ****         usSndBufferCount += usLength;
 362              		.loc 1 203 9 is_stmt 1 view .LVU82
 203:FreeModbus/rtu/mbrtu.c ****         usSndBufferCount += usLength;
 363              		.loc 1 203 46 is_stmt 0 view .LVU83
 364 0034 04F8016C 		strb	r6, [r4, #-1]
 204:FreeModbus/rtu/mbrtu.c **** 
 365              		.loc 1 204 9 is_stmt 1 view .LVU84
 204:FreeModbus/rtu/mbrtu.c **** 
 366              		.loc 1 204 26 is_stmt 0 view .LVU85
 367 0038 3A88     		ldrh	r2, [r7]
 368 003a 92B2     		uxth	r2, r2
 369 003c 1544     		add	r5, r5, r2
 370 003e ADB2     		uxth	r5, r5
 371 0040 3D80     		strh	r5, [r7]	@ movhi
 207:FreeModbus/rtu/mbrtu.c ****         ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 372              		.loc 1 207 9 is_stmt 1 view .LVU86
 207:FreeModbus/rtu/mbrtu.c ****         ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 373              		.loc 1 207 19 is_stmt 0 view .LVU87
 374 0042 3988     		ldrh	r1, [r7]
 375 0044 89B2     		uxth	r1, r1
 376 0046 FFF7FEFF 		bl	usMBCRC16
 377              	.LVL37:
 208:FreeModbus/rtu/mbrtu.c ****         ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 12


 378              		.loc 1 208 9 is_stmt 1 view .LVU88
 208:FreeModbus/rtu/mbrtu.c ****         ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 379              		.loc 1 208 34 is_stmt 0 view .LVU89
 380 004a 3B88     		ldrh	r3, [r7]
 381 004c 9BB2     		uxth	r3, r3
 382 004e 03EB0802 		add	r2, r3, r8
 383 0052 92B2     		uxth	r2, r2
 384 0054 3A80     		strh	r2, [r7]	@ movhi
 208:FreeModbus/rtu/mbrtu.c ****         ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 385              		.loc 1 208 40 view .LVU90
 386 0056 C2B2     		uxtb	r2, r0
 208:FreeModbus/rtu/mbrtu.c ****         ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 387              		.loc 1 208 38 view .LVU91
 388 0058 0C49     		ldr	r1, .L31+12
 389 005a CA54     		strb	r2, [r1, r3]
 209:FreeModbus/rtu/mbrtu.c **** 
 390              		.loc 1 209 9 is_stmt 1 view .LVU92
 209:FreeModbus/rtu/mbrtu.c **** 
 391              		.loc 1 209 34 is_stmt 0 view .LVU93
 392 005c 3B88     		ldrh	r3, [r7]
 393 005e 9BB2     		uxth	r3, r3
 394 0060 03EB0802 		add	r2, r3, r8
 395 0064 92B2     		uxth	r2, r2
 396 0066 3A80     		strh	r2, [r7]	@ movhi
 209:FreeModbus/rtu/mbrtu.c **** 
 397              		.loc 1 209 40 view .LVU94
 398 0068 C0F30720 		ubfx	r0, r0, #8, #8
 399              	.LVL38:
 209:FreeModbus/rtu/mbrtu.c **** 
 400              		.loc 1 209 38 view .LVU95
 401 006c C854     		strb	r0, [r1, r3]
 212:FreeModbus/rtu/mbrtu.c ****         vMBPortSerialEnable( FALSE, TRUE );
 402              		.loc 1 212 9 is_stmt 1 view .LVU96
 212:FreeModbus/rtu/mbrtu.c ****         vMBPortSerialEnable( FALSE, TRUE );
 403              		.loc 1 212 19 is_stmt 0 view .LVU97
 404 006e 084B     		ldr	r3, .L31+16
 405 0070 83F80080 		strb	r8, [r3]
 213:FreeModbus/rtu/mbrtu.c ****     }
 406              		.loc 1 213 9 is_stmt 1 view .LVU98
 407 0074 4146     		mov	r1, r8
 408 0076 0020     		movs	r0, #0
 409 0078 FFF7FEFF 		bl	vMBPortSerialEnable
 410              	.LVL39:
 187:FreeModbus/rtu/mbrtu.c ****     USHORT          usCRC16;
 411              		.loc 1 187 21 is_stmt 0 view .LVU99
 412 007c 0024     		movs	r4, #0
 413              	.LVL40:
 187:FreeModbus/rtu/mbrtu.c ****     USHORT          usCRC16;
 414              		.loc 1 187 21 view .LVU100
 415 007e CCE7     		b	.L27
 416              	.L32:
 417              		.align	2
 418              	.L31:
 419 0080 00000000 		.word	.LANCHOR0
 420 0084 00000000 		.word	.LANCHOR3
 421 0088 00000000 		.word	.LANCHOR4
 422 008c 00000000 		.word	.LANCHOR2
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 13


 423 0090 00000000 		.word	.LANCHOR5
 424              		.cfi_endproc
 425              	.LFE69:
 427              		.section	.text.xMBRTUReceiveFSM,"ax",%progbits
 428              		.align	1
 429              		.global	xMBRTUReceiveFSM
 430              		.syntax unified
 431              		.thumb
 432              		.thumb_func
 434              	xMBRTUReceiveFSM:
 435              	.LFB70:
 222:FreeModbus/rtu/mbrtu.c **** 
 223:FreeModbus/rtu/mbrtu.c **** BOOL
 224:FreeModbus/rtu/mbrtu.c **** xMBRTUReceiveFSM( void )
 225:FreeModbus/rtu/mbrtu.c **** {
 436              		.loc 1 225 1 is_stmt 1 view -0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 8
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440 0000 00B5     		push	{lr}
 441              	.LCFI5:
 442              		.cfi_def_cfa_offset 4
 443              		.cfi_offset 14, -4
 444 0002 83B0     		sub	sp, sp, #12
 445              	.LCFI6:
 446              		.cfi_def_cfa_offset 16
 226:FreeModbus/rtu/mbrtu.c ****     BOOL            xTaskNeedSwitch = FALSE;
 447              		.loc 1 226 5 view .LVU102
 448              	.LVL41:
 227:FreeModbus/rtu/mbrtu.c ****     UCHAR           ucByte;
 449              		.loc 1 227 5 view .LVU103
 228:FreeModbus/rtu/mbrtu.c **** 
 229:FreeModbus/rtu/mbrtu.c ****     assert_param( eSndState == STATE_TX_IDLE );
 450              		.loc 1 229 5 view .LVU104
 230:FreeModbus/rtu/mbrtu.c **** 
 231:FreeModbus/rtu/mbrtu.c ****     /* Always read the character. */
 232:FreeModbus/rtu/mbrtu.c ****     ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 451              		.loc 1 232 5 view .LVU105
 452              		.loc 1 232 13 is_stmt 0 view .LVU106
 453 0004 0DF10700 		add	r0, sp, #7
 454 0008 FFF7FEFF 		bl	xMBPortSerialGetByte
 455              	.LVL42:
 233:FreeModbus/rtu/mbrtu.c **** 
 234:FreeModbus/rtu/mbrtu.c ****     switch ( eRcvState )
 456              		.loc 1 234 5 is_stmt 1 view .LVU107
 457 000c 1C4B     		ldr	r3, .L43
 458 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 459 0010 DBB2     		uxtb	r3, r3
 460 0012 032B     		cmp	r3, #3
 461 0014 05D8     		bhi	.L34
 462 0016 DFE803F0 		tbb	[pc, r3]
 463              	.L36:
 464 001a 02       		.byte	(.L39-.L36)/2
 465 001b 0B       		.byte	(.L38-.L36)/2
 466 001c 1D       		.byte	(.L37-.L36)/2
 467 001d 08       		.byte	(.L35-.L36)/2
 468              		.p2align 1
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 14


 469              	.L39:
 235:FreeModbus/rtu/mbrtu.c ****     {
 236:FreeModbus/rtu/mbrtu.c ****         /* If we have received a character in the init state we have to
 237:FreeModbus/rtu/mbrtu.c ****          * wait until the frame is finished.
 238:FreeModbus/rtu/mbrtu.c ****          */
 239:FreeModbus/rtu/mbrtu.c ****     case STATE_RX_INIT:
 240:FreeModbus/rtu/mbrtu.c ****         vMBPortTimersEnable( );
 470              		.loc 1 240 9 view .LVU108
 471 001e FFF7FEFF 		bl	vMBPortTimersEnable
 472              	.LVL43:
 241:FreeModbus/rtu/mbrtu.c ****         break;
 473              		.loc 1 241 9 view .LVU109
 474              	.L34:
 242:FreeModbus/rtu/mbrtu.c **** 
 243:FreeModbus/rtu/mbrtu.c ****         /* In the error state we wait until all characters in the
 244:FreeModbus/rtu/mbrtu.c ****          * damaged frame are transmitted.
 245:FreeModbus/rtu/mbrtu.c ****          */
 246:FreeModbus/rtu/mbrtu.c ****     case STATE_RX_ERROR:
 247:FreeModbus/rtu/mbrtu.c ****         vMBPortTimersEnable( );
 248:FreeModbus/rtu/mbrtu.c ****         break;
 249:FreeModbus/rtu/mbrtu.c **** 
 250:FreeModbus/rtu/mbrtu.c ****         /* In the idle state we wait for a new character. If a character
 251:FreeModbus/rtu/mbrtu.c ****          * is received the t1.5 and t3.5 timers are started and the
 252:FreeModbus/rtu/mbrtu.c ****          * receiver is in the state STATE_RX_RECEIVCE.
 253:FreeModbus/rtu/mbrtu.c ****          */
 254:FreeModbus/rtu/mbrtu.c ****     case STATE_RX_IDLE:
 255:FreeModbus/rtu/mbrtu.c ****         usRcvBufferPos = 0;
 256:FreeModbus/rtu/mbrtu.c ****         ucRTUBuf[usRcvBufferPos++] = ucByte;
 257:FreeModbus/rtu/mbrtu.c ****         eRcvState = STATE_RX_RCV;
 258:FreeModbus/rtu/mbrtu.c **** 
 259:FreeModbus/rtu/mbrtu.c ****         /* Enable t3.5 timers. */
 260:FreeModbus/rtu/mbrtu.c ****         vMBPortTimersEnable( );
 261:FreeModbus/rtu/mbrtu.c ****         break;
 262:FreeModbus/rtu/mbrtu.c **** 
 263:FreeModbus/rtu/mbrtu.c ****         /* We are currently receiving a frame. Reset the timer after
 264:FreeModbus/rtu/mbrtu.c ****          * every character received. If more than the maximum possible
 265:FreeModbus/rtu/mbrtu.c ****          * number of bytes in a modbus frame is received the frame is
 266:FreeModbus/rtu/mbrtu.c ****          * ignored.
 267:FreeModbus/rtu/mbrtu.c ****          */
 268:FreeModbus/rtu/mbrtu.c ****     case STATE_RX_RCV:
 269:FreeModbus/rtu/mbrtu.c ****         if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 270:FreeModbus/rtu/mbrtu.c ****         {
 271:FreeModbus/rtu/mbrtu.c ****             ucRTUBuf[usRcvBufferPos++] = ucByte;
 272:FreeModbus/rtu/mbrtu.c ****         }
 273:FreeModbus/rtu/mbrtu.c ****         else
 274:FreeModbus/rtu/mbrtu.c ****         {
 275:FreeModbus/rtu/mbrtu.c ****             eRcvState = STATE_RX_ERROR;
 276:FreeModbus/rtu/mbrtu.c ****         }
 277:FreeModbus/rtu/mbrtu.c ****         vMBPortTimersEnable();
 278:FreeModbus/rtu/mbrtu.c ****         break;
 279:FreeModbus/rtu/mbrtu.c ****     }
 280:FreeModbus/rtu/mbrtu.c ****     return xTaskNeedSwitch;
 475              		.loc 1 280 5 view .LVU110
 281:FreeModbus/rtu/mbrtu.c **** }
 476              		.loc 1 281 1 is_stmt 0 view .LVU111
 477 0022 0020     		movs	r0, #0
 478 0024 03B0     		add	sp, sp, #12
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 15


 479              	.LCFI7:
 480              		.cfi_remember_state
 481              		.cfi_def_cfa_offset 4
 482              		@ sp needed
 483 0026 5DF804FB 		ldr	pc, [sp], #4
 484              	.L35:
 485              	.LCFI8:
 486              		.cfi_restore_state
 247:FreeModbus/rtu/mbrtu.c ****         break;
 487              		.loc 1 247 9 is_stmt 1 view .LVU112
 488 002a FFF7FEFF 		bl	vMBPortTimersEnable
 489              	.LVL44:
 248:FreeModbus/rtu/mbrtu.c **** 
 490              		.loc 1 248 9 view .LVU113
 491 002e F8E7     		b	.L34
 492              	.L38:
 255:FreeModbus/rtu/mbrtu.c ****         ucRTUBuf[usRcvBufferPos++] = ucByte;
 493              		.loc 1 255 9 view .LVU114
 255:FreeModbus/rtu/mbrtu.c ****         ucRTUBuf[usRcvBufferPos++] = ucByte;
 494              		.loc 1 255 24 is_stmt 0 view .LVU115
 495 0030 144A     		ldr	r2, .L43+4
 496 0032 0023     		movs	r3, #0
 497 0034 1380     		strh	r3, [r2]	@ movhi
 256:FreeModbus/rtu/mbrtu.c ****         eRcvState = STATE_RX_RCV;
 498              		.loc 1 256 9 is_stmt 1 view .LVU116
 256:FreeModbus/rtu/mbrtu.c ****         eRcvState = STATE_RX_RCV;
 499              		.loc 1 256 32 is_stmt 0 view .LVU117
 500 0036 1388     		ldrh	r3, [r2]
 501 0038 9BB2     		uxth	r3, r3
 502 003a 591C     		adds	r1, r3, #1
 503 003c 89B2     		uxth	r1, r1
 504 003e 1180     		strh	r1, [r2]	@ movhi
 256:FreeModbus/rtu/mbrtu.c ****         eRcvState = STATE_RX_RCV;
 505              		.loc 1 256 36 view .LVU118
 506 0040 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 507 0044 104A     		ldr	r2, .L43+8
 508 0046 D154     		strb	r1, [r2, r3]
 257:FreeModbus/rtu/mbrtu.c **** 
 509              		.loc 1 257 9 is_stmt 1 view .LVU119
 257:FreeModbus/rtu/mbrtu.c **** 
 510              		.loc 1 257 19 is_stmt 0 view .LVU120
 511 0048 0D4B     		ldr	r3, .L43
 512 004a 0222     		movs	r2, #2
 513 004c 1A70     		strb	r2, [r3]
 260:FreeModbus/rtu/mbrtu.c ****         break;
 514              		.loc 1 260 9 is_stmt 1 view .LVU121
 515 004e FFF7FEFF 		bl	vMBPortTimersEnable
 516              	.LVL45:
 261:FreeModbus/rtu/mbrtu.c **** 
 517              		.loc 1 261 9 view .LVU122
 518 0052 E6E7     		b	.L34
 519              	.L37:
 269:FreeModbus/rtu/mbrtu.c ****         {
 520              		.loc 1 269 9 view .LVU123
 269:FreeModbus/rtu/mbrtu.c ****         {
 521              		.loc 1 269 28 is_stmt 0 view .LVU124
 522 0054 0B4B     		ldr	r3, .L43+4
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 16


 523 0056 1B88     		ldrh	r3, [r3]
 524 0058 9BB2     		uxth	r3, r3
 269:FreeModbus/rtu/mbrtu.c ****         {
 525              		.loc 1 269 11 view .LVU125
 526 005a FF2B     		cmp	r3, #255
 527 005c 0CD8     		bhi	.L40
 271:FreeModbus/rtu/mbrtu.c ****         }
 528              		.loc 1 271 13 is_stmt 1 view .LVU126
 271:FreeModbus/rtu/mbrtu.c ****         }
 529              		.loc 1 271 36 is_stmt 0 view .LVU127
 530 005e 0949     		ldr	r1, .L43+4
 531 0060 0B88     		ldrh	r3, [r1]
 532 0062 9BB2     		uxth	r3, r3
 533 0064 5A1C     		adds	r2, r3, #1
 534 0066 92B2     		uxth	r2, r2
 535 0068 0A80     		strh	r2, [r1]	@ movhi
 271:FreeModbus/rtu/mbrtu.c ****         }
 536              		.loc 1 271 40 view .LVU128
 537 006a 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 538 006e 064A     		ldr	r2, .L43+8
 539 0070 D154     		strb	r1, [r2, r3]
 540              	.L41:
 277:FreeModbus/rtu/mbrtu.c ****         break;
 541              		.loc 1 277 9 is_stmt 1 view .LVU129
 542 0072 FFF7FEFF 		bl	vMBPortTimersEnable
 543              	.LVL46:
 278:FreeModbus/rtu/mbrtu.c ****     }
 544              		.loc 1 278 9 view .LVU130
 545 0076 D4E7     		b	.L34
 546              	.L40:
 275:FreeModbus/rtu/mbrtu.c ****         }
 547              		.loc 1 275 13 view .LVU131
 275:FreeModbus/rtu/mbrtu.c ****         }
 548              		.loc 1 275 23 is_stmt 0 view .LVU132
 549 0078 014B     		ldr	r3, .L43
 550 007a 0322     		movs	r2, #3
 551 007c 1A70     		strb	r2, [r3]
 552 007e F8E7     		b	.L41
 553              	.L44:
 554              		.align	2
 555              	.L43:
 556 0080 00000000 		.word	.LANCHOR0
 557 0084 00000000 		.word	.LANCHOR1
 558 0088 00000000 		.word	.LANCHOR2
 559              		.cfi_endproc
 560              	.LFE70:
 562              		.section	.text.xMBRTUTransmitFSM,"ax",%progbits
 563              		.align	1
 564              		.global	xMBRTUTransmitFSM
 565              		.syntax unified
 566              		.thumb
 567              		.thumb_func
 569              	xMBRTUTransmitFSM:
 570              	.LFB71:
 282:FreeModbus/rtu/mbrtu.c **** 
 283:FreeModbus/rtu/mbrtu.c **** BOOL
 284:FreeModbus/rtu/mbrtu.c **** xMBRTUTransmitFSM( void )
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 17


 285:FreeModbus/rtu/mbrtu.c **** {
 571              		.loc 1 285 1 is_stmt 1 view -0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 0
 574              		@ frame_needed = 0, uses_anonymous_args = 0
 575 0000 38B5     		push	{r3, r4, r5, lr}
 576              	.LCFI9:
 577              		.cfi_def_cfa_offset 16
 578              		.cfi_offset 3, -16
 579              		.cfi_offset 4, -12
 580              		.cfi_offset 5, -8
 581              		.cfi_offset 14, -4
 286:FreeModbus/rtu/mbrtu.c ****     BOOL            xNeedPoll = FALSE;
 582              		.loc 1 286 5 view .LVU134
 583              	.LVL47:
 287:FreeModbus/rtu/mbrtu.c **** 
 288:FreeModbus/rtu/mbrtu.c ****     assert_param( eRcvState == STATE_RX_IDLE );
 584              		.loc 1 288 5 view .LVU135
 289:FreeModbus/rtu/mbrtu.c **** 
 290:FreeModbus/rtu/mbrtu.c ****     switch ( eSndState )
 585              		.loc 1 290 5 view .LVU136
 586 0002 144B     		ldr	r3, .L51
 587 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 588 0006 03F0FF04 		and	r4, r3, #255
 589 000a 23B1     		cbz	r3, .L46
 590 000c 012C     		cmp	r4, #1
 591 000e 07D0     		beq	.L47
 592 0010 0024     		movs	r4, #0
 593              	.LVL48:
 594              	.L48:
 291:FreeModbus/rtu/mbrtu.c ****     {
 292:FreeModbus/rtu/mbrtu.c ****         /* We should not get a transmitter event if the transmitter is in
 293:FreeModbus/rtu/mbrtu.c ****          * idle state.  */
 294:FreeModbus/rtu/mbrtu.c ****     case STATE_TX_IDLE:
 295:FreeModbus/rtu/mbrtu.c ****         /* enable receiver/disable transmitter. */
 296:FreeModbus/rtu/mbrtu.c ****         vMBPortSerialEnable( TRUE, FALSE );
 297:FreeModbus/rtu/mbrtu.c ****         break;
 298:FreeModbus/rtu/mbrtu.c **** 
 299:FreeModbus/rtu/mbrtu.c ****     case STATE_TX_XMIT:
 300:FreeModbus/rtu/mbrtu.c ****         /* check if we are finished. */
 301:FreeModbus/rtu/mbrtu.c ****         if( usSndBufferCount != 0 )
 302:FreeModbus/rtu/mbrtu.c ****         {
 303:FreeModbus/rtu/mbrtu.c **** #if SEND_ALL_BYTES_IN_ONE_CALL > 0
 304:FreeModbus/rtu/mbrtu.c **** 			xMBPortSerialPutBytes(pucSndBufferCur, usSndBufferCount);
 305:FreeModbus/rtu/mbrtu.c **** 			usSndBufferCount = 0;
 306:FreeModbus/rtu/mbrtu.c **** #else
 307:FreeModbus/rtu/mbrtu.c ****             xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 308:FreeModbus/rtu/mbrtu.c ****             pucSndBufferCur++;  /* next byte in sendbuffer. */
 309:FreeModbus/rtu/mbrtu.c ****             usSndBufferCount--;
 310:FreeModbus/rtu/mbrtu.c **** #endif
 311:FreeModbus/rtu/mbrtu.c ****         }
 312:FreeModbus/rtu/mbrtu.c ****         else
 313:FreeModbus/rtu/mbrtu.c ****         {
 314:FreeModbus/rtu/mbrtu.c ****             xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 315:FreeModbus/rtu/mbrtu.c ****             /* Disable transmitter. This prevents another transmit buffer
 316:FreeModbus/rtu/mbrtu.c ****              * empty interrupt. */
 317:FreeModbus/rtu/mbrtu.c ****             vMBPortSerialEnable( TRUE, FALSE );
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 18


 318:FreeModbus/rtu/mbrtu.c ****             eSndState = STATE_TX_IDLE;
 319:FreeModbus/rtu/mbrtu.c ****         }
 320:FreeModbus/rtu/mbrtu.c ****         break;
 321:FreeModbus/rtu/mbrtu.c ****     }
 322:FreeModbus/rtu/mbrtu.c **** 
 323:FreeModbus/rtu/mbrtu.c ****     return xNeedPoll;
 595              		.loc 1 323 5 view .LVU137
 324:FreeModbus/rtu/mbrtu.c **** }
 596              		.loc 1 324 1 is_stmt 0 view .LVU138
 597 0012 2046     		mov	r0, r4
 598 0014 38BD     		pop	{r3, r4, r5, pc}
 599              	.LVL49:
 600              	.L46:
 296:FreeModbus/rtu/mbrtu.c ****         break;
 601              		.loc 1 296 9 is_stmt 1 view .LVU139
 602 0016 0021     		movs	r1, #0
 603 0018 0120     		movs	r0, #1
 604 001a FFF7FEFF 		bl	vMBPortSerialEnable
 605              	.LVL50:
 297:FreeModbus/rtu/mbrtu.c **** 
 606              		.loc 1 297 9 view .LVU140
 607 001e F8E7     		b	.L48
 608              	.L47:
 301:FreeModbus/rtu/mbrtu.c ****         {
 609              		.loc 1 301 9 view .LVU141
 301:FreeModbus/rtu/mbrtu.c ****         {
 610              		.loc 1 301 30 is_stmt 0 view .LVU142
 611 0020 0D4B     		ldr	r3, .L51+4
 612 0022 1B88     		ldrh	r3, [r3]
 613 0024 9BB2     		uxth	r3, r3
 301:FreeModbus/rtu/mbrtu.c ****         {
 614              		.loc 1 301 11 view .LVU143
 615 0026 4BB1     		cbz	r3, .L49
 304:FreeModbus/rtu/mbrtu.c **** 			usSndBufferCount = 0;
 616              		.loc 1 304 4 is_stmt 1 view .LVU144
 617 0028 0B4D     		ldr	r5, .L51+4
 618 002a 2988     		ldrh	r1, [r5]
 619 002c 89B2     		uxth	r1, r1
 620 002e 0B4B     		ldr	r3, .L51+8
 621 0030 1868     		ldr	r0, [r3]
 622 0032 FFF7FEFF 		bl	xMBPortSerialPutBytes
 623              	.LVL51:
 305:FreeModbus/rtu/mbrtu.c **** #else
 624              		.loc 1 305 4 view .LVU145
 305:FreeModbus/rtu/mbrtu.c **** #else
 625              		.loc 1 305 21 is_stmt 0 view .LVU146
 626 0036 0024     		movs	r4, #0
 627 0038 2C80     		strh	r4, [r5]	@ movhi
 628 003a EAE7     		b	.L48
 629              	.L49:
 314:FreeModbus/rtu/mbrtu.c ****             /* Disable transmitter. This prevents another transmit buffer
 630              		.loc 1 314 13 is_stmt 1 view .LVU147
 314:FreeModbus/rtu/mbrtu.c ****             /* Disable transmitter. This prevents another transmit buffer
 631              		.loc 1 314 25 is_stmt 0 view .LVU148
 632 003c 0820     		movs	r0, #8
 633 003e FFF7FEFF 		bl	xMBPortEventPost
 634              	.LVL52:
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 19


 635 0042 0446     		mov	r4, r0
 636              	.LVL53:
 317:FreeModbus/rtu/mbrtu.c ****             eSndState = STATE_TX_IDLE;
 637              		.loc 1 317 13 is_stmt 1 view .LVU149
 638 0044 0021     		movs	r1, #0
 639 0046 0120     		movs	r0, #1
 640 0048 FFF7FEFF 		bl	vMBPortSerialEnable
 641              	.LVL54:
 318:FreeModbus/rtu/mbrtu.c ****         }
 642              		.loc 1 318 13 view .LVU150
 318:FreeModbus/rtu/mbrtu.c ****         }
 643              		.loc 1 318 23 is_stmt 0 view .LVU151
 644 004c 014B     		ldr	r3, .L51
 645 004e 0022     		movs	r2, #0
 646 0050 1A70     		strb	r2, [r3]
 647 0052 DEE7     		b	.L48
 648              	.L52:
 649              		.align	2
 650              	.L51:
 651 0054 00000000 		.word	.LANCHOR5
 652 0058 00000000 		.word	.LANCHOR4
 653 005c 00000000 		.word	.LANCHOR3
 654              		.cfi_endproc
 655              	.LFE71:
 657              		.section	.text.xMBRTUTimerT35Expired,"ax",%progbits
 658              		.align	1
 659              		.global	xMBRTUTimerT35Expired
 660              		.syntax unified
 661              		.thumb
 662              		.thumb_func
 664              	xMBRTUTimerT35Expired:
 665              	.LFB72:
 325:FreeModbus/rtu/mbrtu.c **** 
 326:FreeModbus/rtu/mbrtu.c **** BOOL
 327:FreeModbus/rtu/mbrtu.c **** xMBRTUTimerT35Expired( void )
 328:FreeModbus/rtu/mbrtu.c **** {
 666              		.loc 1 328 1 is_stmt 1 view -0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 0
 669              		@ frame_needed = 0, uses_anonymous_args = 0
 670 0000 10B5     		push	{r4, lr}
 671              	.LCFI10:
 672              		.cfi_def_cfa_offset 8
 673              		.cfi_offset 4, -8
 674              		.cfi_offset 14, -4
 329:FreeModbus/rtu/mbrtu.c ****     BOOL            xNeedPoll = FALSE;
 675              		.loc 1 329 5 view .LVU153
 676              	.LVL55:
 330:FreeModbus/rtu/mbrtu.c **** 
 331:FreeModbus/rtu/mbrtu.c ****     switch ( eRcvState )
 677              		.loc 1 331 5 view .LVU154
 678 0002 0C4B     		ldr	r3, .L58
 679 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 680 0006 5BB1     		cbz	r3, .L54
 681 0008 03F0FF02 		and	r2, r3, #255
 682 000c 022A     		cmp	r2, #2
 683 000e 0CD0     		beq	.L55
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 20


 684 0010 0024     		movs	r4, #0
 685              	.LVL56:
 686              	.L56:
 332:FreeModbus/rtu/mbrtu.c ****     {
 333:FreeModbus/rtu/mbrtu.c ****         /* Timer t35 expired. Startup phase is finished. */
 334:FreeModbus/rtu/mbrtu.c ****     case STATE_RX_INIT:
 335:FreeModbus/rtu/mbrtu.c ****         xNeedPoll = xMBPortEventPost( EV_READY );
 336:FreeModbus/rtu/mbrtu.c ****         break;
 337:FreeModbus/rtu/mbrtu.c **** 
 338:FreeModbus/rtu/mbrtu.c ****         /* A frame was received and t35 expired. Notify the listener that
 339:FreeModbus/rtu/mbrtu.c ****          * a new frame was received. */
 340:FreeModbus/rtu/mbrtu.c ****     case STATE_RX_RCV:
 341:FreeModbus/rtu/mbrtu.c ****         xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 342:FreeModbus/rtu/mbrtu.c ****         break;
 343:FreeModbus/rtu/mbrtu.c **** 
 344:FreeModbus/rtu/mbrtu.c ****         /* An error occured while receiving the frame. */
 345:FreeModbus/rtu/mbrtu.c ****     case STATE_RX_ERROR:
 346:FreeModbus/rtu/mbrtu.c ****         break;
 347:FreeModbus/rtu/mbrtu.c **** 
 348:FreeModbus/rtu/mbrtu.c ****         /* Function called in an illegal state. */
 349:FreeModbus/rtu/mbrtu.c ****     default:
 350:FreeModbus/rtu/mbrtu.c ****         assert_param( ( eRcvState == STATE_RX_INIT ) ||
 351:FreeModbus/rtu/mbrtu.c ****                 ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
 352:FreeModbus/rtu/mbrtu.c ****          break;
 353:FreeModbus/rtu/mbrtu.c ****     }
 354:FreeModbus/rtu/mbrtu.c **** 
 355:FreeModbus/rtu/mbrtu.c ****     vMBPortTimersDisable(  );
 687              		.loc 1 355 5 view .LVU155
 688 0012 FFF7FEFF 		bl	vMBPortTimersDisable
 689              	.LVL57:
 356:FreeModbus/rtu/mbrtu.c ****     eRcvState = STATE_RX_IDLE;
 690              		.loc 1 356 5 view .LVU156
 691              		.loc 1 356 15 is_stmt 0 view .LVU157
 692 0016 074B     		ldr	r3, .L58
 693 0018 0122     		movs	r2, #1
 694 001a 1A70     		strb	r2, [r3]
 357:FreeModbus/rtu/mbrtu.c **** 
 358:FreeModbus/rtu/mbrtu.c ****     return xNeedPoll;
 695              		.loc 1 358 5 is_stmt 1 view .LVU158
 359:FreeModbus/rtu/mbrtu.c **** }
 696              		.loc 1 359 1 is_stmt 0 view .LVU159
 697 001c 2046     		mov	r0, r4
 698 001e 10BD     		pop	{r4, pc}
 699              	.LVL58:
 700              	.L54:
 335:FreeModbus/rtu/mbrtu.c ****         break;
 701              		.loc 1 335 9 is_stmt 1 view .LVU160
 335:FreeModbus/rtu/mbrtu.c ****         break;
 702              		.loc 1 335 21 is_stmt 0 view .LVU161
 703 0020 0120     		movs	r0, #1
 704 0022 FFF7FEFF 		bl	xMBPortEventPost
 705              	.LVL59:
 706 0026 0446     		mov	r4, r0
 707              	.LVL60:
 336:FreeModbus/rtu/mbrtu.c **** 
 708              		.loc 1 336 9 is_stmt 1 view .LVU162
 709 0028 F3E7     		b	.L56
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 21


 710              	.LVL61:
 711              	.L55:
 341:FreeModbus/rtu/mbrtu.c ****         break;
 712              		.loc 1 341 9 view .LVU163
 341:FreeModbus/rtu/mbrtu.c ****         break;
 713              		.loc 1 341 21 is_stmt 0 view .LVU164
 714 002a 0220     		movs	r0, #2
 715 002c FFF7FEFF 		bl	xMBPortEventPost
 716              	.LVL62:
 717 0030 0446     		mov	r4, r0
 718              	.LVL63:
 342:FreeModbus/rtu/mbrtu.c **** 
 719              		.loc 1 342 9 is_stmt 1 view .LVU165
 720 0032 EEE7     		b	.L56
 721              	.L59:
 722              		.align	2
 723              	.L58:
 724 0034 00000000 		.word	.LANCHOR0
 725              		.cfi_endproc
 726              	.LFE72:
 728              		.global	ucRTUBuf
 729              		.section	.bss.eRcvState,"aw",%nobits
 730              		.set	.LANCHOR0,. + 0
 733              	eRcvState:
 734 0000 00       		.space	1
 735              		.section	.bss.eSndState,"aw",%nobits
 736              		.set	.LANCHOR5,. + 0
 739              	eSndState:
 740 0000 00       		.space	1
 741              		.section	.bss.pucSndBufferCur,"aw",%nobits
 742              		.align	2
 743              		.set	.LANCHOR3,. + 0
 746              	pucSndBufferCur:
 747 0000 00000000 		.space	4
 748              		.section	.bss.ucRTUBuf,"aw",%nobits
 749              		.align	2
 750              		.set	.LANCHOR2,. + 0
 753              	ucRTUBuf:
 754 0000 00000000 		.space	256
 754      00000000 
 754      00000000 
 754      00000000 
 754      00000000 
 755              		.section	.bss.usRcvBufferPos,"aw",%nobits
 756              		.align	1
 757              		.set	.LANCHOR1,. + 0
 760              	usRcvBufferPos:
 761 0000 0000     		.space	2
 762              		.section	.bss.usSndBufferCount,"aw",%nobits
 763              		.align	1
 764              		.set	.LANCHOR4,. + 0
 767              	usSndBufferCount:
 768 0000 0000     		.space	2
 769              		.text
 770              	.Letext0:
 771              		.file 2 "e:\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\machine\\_default_typ
 772              		.file 3 "e:\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\sys\\_stdint.h"
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 22


 773              		.file 4 "FreeModbus/port/port.h"
 774              		.file 5 "FreeModbus/include/mbport.h"
 775              		.file 6 "FreeModbus/include/mb.h"
 776              		.file 7 "FreeModbus/port/portcritical.h"
 777              		.file 8 "FreeModbus/rtu/mbcrc.h"
ARM GAS  C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s 			page 23


DEFINED SYMBOLS
                            *ABS*:00000000 mbrtu.c
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:18     .text.eMBRTUInit:00000000 $t
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:24     .text.eMBRTUInit:00000000 eMBRTUInit
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:113    .text.eMBRTUInit:0000004c $d
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:118    .text.eMBRTUStart:00000000 $t
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:124    .text.eMBRTUStart:00000000 eMBRTUStart
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:158    .text.eMBRTUStart:0000001c $d
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:163    .text.eMBRTUStop:00000000 $t
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:169    .text.eMBRTUStop:00000000 eMBRTUStop
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:200    .text.eMBRTUReceive:00000000 $t
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:206    .text.eMBRTUReceive:00000000 eMBRTUReceive
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:292    .text.eMBRTUReceive:0000004c $d
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:298    .text.eMBRTUSend:00000000 $t
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:304    .text.eMBRTUSend:00000000 eMBRTUSend
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:419    .text.eMBRTUSend:00000080 $d
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:428    .text.xMBRTUReceiveFSM:00000000 $t
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:434    .text.xMBRTUReceiveFSM:00000000 xMBRTUReceiveFSM
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:464    .text.xMBRTUReceiveFSM:0000001a $d
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:468    .text.xMBRTUReceiveFSM:0000001e $t
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:556    .text.xMBRTUReceiveFSM:00000080 $d
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:563    .text.xMBRTUTransmitFSM:00000000 $t
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:569    .text.xMBRTUTransmitFSM:00000000 xMBRTUTransmitFSM
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:651    .text.xMBRTUTransmitFSM:00000054 $d
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:658    .text.xMBRTUTimerT35Expired:00000000 $t
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:664    .text.xMBRTUTimerT35Expired:00000000 xMBRTUTimerT35Expired
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:724    .text.xMBRTUTimerT35Expired:00000034 $d
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:753    .bss.ucRTUBuf:00000000 ucRTUBuf
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:733    .bss.eRcvState:00000000 eRcvState
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:734    .bss.eRcvState:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:739    .bss.eSndState:00000000 eSndState
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:740    .bss.eSndState:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:742    .bss.pucSndBufferCur:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:746    .bss.pucSndBufferCur:00000000 pucSndBufferCur
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:749    .bss.ucRTUBuf:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:756    .bss.usRcvBufferPos:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:760    .bss.usRcvBufferPos:00000000 usRcvBufferPos
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:763    .bss.usSndBufferCount:00000000 $d
C:\Users\BLACK_~1\AppData\Local\Temp\cck96Uso.s:767    .bss.usSndBufferCount:00000000 usSndBufferCount

UNDEFINED SYMBOLS
__critical_enter
xMBPortSerialInit
__critical_exit
xMBPortTimersInit
vMBPortSerialEnable
vMBPortTimersEnable
vMBPortTimersDisable
usMBCRC16
xMBPortSerialGetByte
xMBPortSerialPutBytes
xMBPortEventPost
